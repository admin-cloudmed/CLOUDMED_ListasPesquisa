'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.209
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet1
    Inherits DataSet
    
    Private tableAmb_completo As Amb_completoDataTable
    
    Private tableAMB1 As AMB1DataTable
    
    Private tableAMB2 As AMB2DataTable
    
    Private tableCID_3 As CID_3DataTable
    
    Private tableCID_4 As CID_4DataTable
    
    Private tableCID_CAPITULO As CID_CAPITULODataTable
    
    Private tableCID_GRUPO As CID_GRUPODataTable
    
    Private tableCRM As CRMDataTable
    
    Private tableTABESPMEDICA As TABESPMEDICADataTable
    
    Private tablePaciente As PacienteDataTable
    
    Private tableProntuarios As ProntuariosDataTable
    
    Private tableCEP_BAI As CEP_BAIDataTable
    
    Private tableCEP_LOC As CEP_LOCDataTable
    
    Private tableCEP_LOG As CEP_LOGDataTable
    
    Private tableCEP_UFS As CEP_UFSDataTable
    
    Private tableCNAE_1 As CNAE_1DataTable
    
    Private tablecnae_2 As cnae_2DataTable
    
    Private tableCNAE_FINAL As CNAE_FINALDataTable
    
    Private tableCBO_Grande_Grupo As CBO_Grande_GrupoDataTable
    
    Private tableCBO_Grupo_Base As CBO_Grupo_BaseDataTable
    
    Private tableCBO_Grupo_Final As CBO_Grupo_FinalDataTable
    
    Private tableCBO_SubGrupo As CBO_SubGrupoDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Amb_completo")) Is Nothing) Then
                Me.Tables.Add(New Amb_completoDataTable(ds.Tables("Amb_completo")))
            End If
            If (Not (ds.Tables("AMB1")) Is Nothing) Then
                Me.Tables.Add(New AMB1DataTable(ds.Tables("AMB1")))
            End If
            If (Not (ds.Tables("AMB2")) Is Nothing) Then
                Me.Tables.Add(New AMB2DataTable(ds.Tables("AMB2")))
            End If
            If (Not (ds.Tables("CID_3")) Is Nothing) Then
                Me.Tables.Add(New CID_3DataTable(ds.Tables("CID_3")))
            End If
            If (Not (ds.Tables("CID_4")) Is Nothing) Then
                Me.Tables.Add(New CID_4DataTable(ds.Tables("CID_4")))
            End If
            If (Not (ds.Tables("CID_CAPITULO")) Is Nothing) Then
                Me.Tables.Add(New CID_CAPITULODataTable(ds.Tables("CID_CAPITULO")))
            End If
            If (Not (ds.Tables("CID_GRUPO")) Is Nothing) Then
                Me.Tables.Add(New CID_GRUPODataTable(ds.Tables("CID_GRUPO")))
            End If
            If (Not (ds.Tables("CRM")) Is Nothing) Then
                Me.Tables.Add(New CRMDataTable(ds.Tables("CRM")))
            End If
            If (Not (ds.Tables("TABESPMEDICA")) Is Nothing) Then
                Me.Tables.Add(New TABESPMEDICADataTable(ds.Tables("TABESPMEDICA")))
            End If
            If (Not (ds.Tables("Paciente")) Is Nothing) Then
                Me.Tables.Add(New PacienteDataTable(ds.Tables("Paciente")))
            End If
            If (Not (ds.Tables("Prontuarios")) Is Nothing) Then
                Me.Tables.Add(New ProntuariosDataTable(ds.Tables("Prontuarios")))
            End If
            If (Not (ds.Tables("CEP_BAI")) Is Nothing) Then
                Me.Tables.Add(New CEP_BAIDataTable(ds.Tables("CEP_BAI")))
            End If
            If (Not (ds.Tables("CEP_LOC")) Is Nothing) Then
                Me.Tables.Add(New CEP_LOCDataTable(ds.Tables("CEP_LOC")))
            End If
            If (Not (ds.Tables("CEP_LOG")) Is Nothing) Then
                Me.Tables.Add(New CEP_LOGDataTable(ds.Tables("CEP_LOG")))
            End If
            If (Not (ds.Tables("CEP_UFS")) Is Nothing) Then
                Me.Tables.Add(New CEP_UFSDataTable(ds.Tables("CEP_UFS")))
            End If
            If (Not (ds.Tables("CNAE_1")) Is Nothing) Then
                Me.Tables.Add(New CNAE_1DataTable(ds.Tables("CNAE_1")))
            End If
            If (Not (ds.Tables("cnae_2")) Is Nothing) Then
                Me.Tables.Add(New cnae_2DataTable(ds.Tables("cnae_2")))
            End If
            If (Not (ds.Tables("CNAE_FINAL")) Is Nothing) Then
                Me.Tables.Add(New CNAE_FINALDataTable(ds.Tables("CNAE_FINAL")))
            End If
            If (Not (ds.Tables("CBO_Grande_Grupo")) Is Nothing) Then
                Me.Tables.Add(New CBO_Grande_GrupoDataTable(ds.Tables("CBO_Grande_Grupo")))
            End If
            If (Not (ds.Tables("CBO_Grupo_Base")) Is Nothing) Then
                Me.Tables.Add(New CBO_Grupo_BaseDataTable(ds.Tables("CBO_Grupo_Base")))
            End If
            If (Not (ds.Tables("CBO_Grupo_Final")) Is Nothing) Then
                Me.Tables.Add(New CBO_Grupo_FinalDataTable(ds.Tables("CBO_Grupo_Final")))
            End If
            If (Not (ds.Tables("CBO_SubGrupo")) Is Nothing) Then
                Me.Tables.Add(New CBO_SubGrupoDataTable(ds.Tables("CBO_SubGrupo")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Amb_completo As Amb_completoDataTable
        Get
            Return Me.tableAmb_completo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AMB1 As AMB1DataTable
        Get
            Return Me.tableAMB1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AMB2 As AMB2DataTable
        Get
            Return Me.tableAMB2
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CID_3 As CID_3DataTable
        Get
            Return Me.tableCID_3
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CID_4 As CID_4DataTable
        Get
            Return Me.tableCID_4
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CID_CAPITULO As CID_CAPITULODataTable
        Get
            Return Me.tableCID_CAPITULO
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CID_GRUPO As CID_GRUPODataTable
        Get
            Return Me.tableCID_GRUPO
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CRM As CRMDataTable
        Get
            Return Me.tableCRM
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TABESPMEDICA As TABESPMEDICADataTable
        Get
            Return Me.tableTABESPMEDICA
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Paciente As PacienteDataTable
        Get
            Return Me.tablePaciente
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Prontuarios As ProntuariosDataTable
        Get
            Return Me.tableProntuarios
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CEP_BAI As CEP_BAIDataTable
        Get
            Return Me.tableCEP_BAI
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CEP_LOC As CEP_LOCDataTable
        Get
            Return Me.tableCEP_LOC
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CEP_LOG As CEP_LOGDataTable
        Get
            Return Me.tableCEP_LOG
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CEP_UFS As CEP_UFSDataTable
        Get
            Return Me.tableCEP_UFS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CNAE_1 As CNAE_1DataTable
        Get
            Return Me.tableCNAE_1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cnae_2 As cnae_2DataTable
        Get
            Return Me.tablecnae_2
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CNAE_FINAL As CNAE_FINALDataTable
        Get
            Return Me.tableCNAE_FINAL
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CBO_Grande_Grupo As CBO_Grande_GrupoDataTable
        Get
            Return Me.tableCBO_Grande_Grupo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CBO_Grupo_Base As CBO_Grupo_BaseDataTable
        Get
            Return Me.tableCBO_Grupo_Base
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CBO_Grupo_Final As CBO_Grupo_FinalDataTable
        Get
            Return Me.tableCBO_Grupo_Final
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CBO_SubGrupo As CBO_SubGrupoDataTable
        Get
            Return Me.tableCBO_SubGrupo
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Amb_completo")) Is Nothing) Then
            Me.Tables.Add(New Amb_completoDataTable(ds.Tables("Amb_completo")))
        End If
        If (Not (ds.Tables("AMB1")) Is Nothing) Then
            Me.Tables.Add(New AMB1DataTable(ds.Tables("AMB1")))
        End If
        If (Not (ds.Tables("AMB2")) Is Nothing) Then
            Me.Tables.Add(New AMB2DataTable(ds.Tables("AMB2")))
        End If
        If (Not (ds.Tables("CID_3")) Is Nothing) Then
            Me.Tables.Add(New CID_3DataTable(ds.Tables("CID_3")))
        End If
        If (Not (ds.Tables("CID_4")) Is Nothing) Then
            Me.Tables.Add(New CID_4DataTable(ds.Tables("CID_4")))
        End If
        If (Not (ds.Tables("CID_CAPITULO")) Is Nothing) Then
            Me.Tables.Add(New CID_CAPITULODataTable(ds.Tables("CID_CAPITULO")))
        End If
        If (Not (ds.Tables("CID_GRUPO")) Is Nothing) Then
            Me.Tables.Add(New CID_GRUPODataTable(ds.Tables("CID_GRUPO")))
        End If
        If (Not (ds.Tables("CRM")) Is Nothing) Then
            Me.Tables.Add(New CRMDataTable(ds.Tables("CRM")))
        End If
        If (Not (ds.Tables("TABESPMEDICA")) Is Nothing) Then
            Me.Tables.Add(New TABESPMEDICADataTable(ds.Tables("TABESPMEDICA")))
        End If
        If (Not (ds.Tables("Paciente")) Is Nothing) Then
            Me.Tables.Add(New PacienteDataTable(ds.Tables("Paciente")))
        End If
        If (Not (ds.Tables("Prontuarios")) Is Nothing) Then
            Me.Tables.Add(New ProntuariosDataTable(ds.Tables("Prontuarios")))
        End If
        If (Not (ds.Tables("CEP_BAI")) Is Nothing) Then
            Me.Tables.Add(New CEP_BAIDataTable(ds.Tables("CEP_BAI")))
        End If
        If (Not (ds.Tables("CEP_LOC")) Is Nothing) Then
            Me.Tables.Add(New CEP_LOCDataTable(ds.Tables("CEP_LOC")))
        End If
        If (Not (ds.Tables("CEP_LOG")) Is Nothing) Then
            Me.Tables.Add(New CEP_LOGDataTable(ds.Tables("CEP_LOG")))
        End If
        If (Not (ds.Tables("CEP_UFS")) Is Nothing) Then
            Me.Tables.Add(New CEP_UFSDataTable(ds.Tables("CEP_UFS")))
        End If
        If (Not (ds.Tables("CNAE_1")) Is Nothing) Then
            Me.Tables.Add(New CNAE_1DataTable(ds.Tables("CNAE_1")))
        End If
        If (Not (ds.Tables("cnae_2")) Is Nothing) Then
            Me.Tables.Add(New cnae_2DataTable(ds.Tables("cnae_2")))
        End If
        If (Not (ds.Tables("CNAE_FINAL")) Is Nothing) Then
            Me.Tables.Add(New CNAE_FINALDataTable(ds.Tables("CNAE_FINAL")))
        End If
        If (Not (ds.Tables("CBO_Grande_Grupo")) Is Nothing) Then
            Me.Tables.Add(New CBO_Grande_GrupoDataTable(ds.Tables("CBO_Grande_Grupo")))
        End If
        If (Not (ds.Tables("CBO_Grupo_Base")) Is Nothing) Then
            Me.Tables.Add(New CBO_Grupo_BaseDataTable(ds.Tables("CBO_Grupo_Base")))
        End If
        If (Not (ds.Tables("CBO_Grupo_Final")) Is Nothing) Then
            Me.Tables.Add(New CBO_Grupo_FinalDataTable(ds.Tables("CBO_Grupo_Final")))
        End If
        If (Not (ds.Tables("CBO_SubGrupo")) Is Nothing) Then
            Me.Tables.Add(New CBO_SubGrupoDataTable(ds.Tables("CBO_SubGrupo")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableAmb_completo = CType(Me.Tables("Amb_completo"),Amb_completoDataTable)
        If (Not (Me.tableAmb_completo) Is Nothing) Then
            Me.tableAmb_completo.InitVars
        End If
        Me.tableAMB1 = CType(Me.Tables("AMB1"),AMB1DataTable)
        If (Not (Me.tableAMB1) Is Nothing) Then
            Me.tableAMB1.InitVars
        End If
        Me.tableAMB2 = CType(Me.Tables("AMB2"),AMB2DataTable)
        If (Not (Me.tableAMB2) Is Nothing) Then
            Me.tableAMB2.InitVars
        End If
        Me.tableCID_3 = CType(Me.Tables("CID_3"),CID_3DataTable)
        If (Not (Me.tableCID_3) Is Nothing) Then
            Me.tableCID_3.InitVars
        End If
        Me.tableCID_4 = CType(Me.Tables("CID_4"),CID_4DataTable)
        If (Not (Me.tableCID_4) Is Nothing) Then
            Me.tableCID_4.InitVars
        End If
        Me.tableCID_CAPITULO = CType(Me.Tables("CID_CAPITULO"),CID_CAPITULODataTable)
        If (Not (Me.tableCID_CAPITULO) Is Nothing) Then
            Me.tableCID_CAPITULO.InitVars
        End If
        Me.tableCID_GRUPO = CType(Me.Tables("CID_GRUPO"),CID_GRUPODataTable)
        If (Not (Me.tableCID_GRUPO) Is Nothing) Then
            Me.tableCID_GRUPO.InitVars
        End If
        Me.tableCRM = CType(Me.Tables("CRM"),CRMDataTable)
        If (Not (Me.tableCRM) Is Nothing) Then
            Me.tableCRM.InitVars
        End If
        Me.tableTABESPMEDICA = CType(Me.Tables("TABESPMEDICA"),TABESPMEDICADataTable)
        If (Not (Me.tableTABESPMEDICA) Is Nothing) Then
            Me.tableTABESPMEDICA.InitVars
        End If
        Me.tablePaciente = CType(Me.Tables("Paciente"),PacienteDataTable)
        If (Not (Me.tablePaciente) Is Nothing) Then
            Me.tablePaciente.InitVars
        End If
        Me.tableProntuarios = CType(Me.Tables("Prontuarios"),ProntuariosDataTable)
        If (Not (Me.tableProntuarios) Is Nothing) Then
            Me.tableProntuarios.InitVars
        End If
        Me.tableCEP_BAI = CType(Me.Tables("CEP_BAI"),CEP_BAIDataTable)
        If (Not (Me.tableCEP_BAI) Is Nothing) Then
            Me.tableCEP_BAI.InitVars
        End If
        Me.tableCEP_LOC = CType(Me.Tables("CEP_LOC"),CEP_LOCDataTable)
        If (Not (Me.tableCEP_LOC) Is Nothing) Then
            Me.tableCEP_LOC.InitVars
        End If
        Me.tableCEP_LOG = CType(Me.Tables("CEP_LOG"),CEP_LOGDataTable)
        If (Not (Me.tableCEP_LOG) Is Nothing) Then
            Me.tableCEP_LOG.InitVars
        End If
        Me.tableCEP_UFS = CType(Me.Tables("CEP_UFS"),CEP_UFSDataTable)
        If (Not (Me.tableCEP_UFS) Is Nothing) Then
            Me.tableCEP_UFS.InitVars
        End If
        Me.tableCNAE_1 = CType(Me.Tables("CNAE_1"),CNAE_1DataTable)
        If (Not (Me.tableCNAE_1) Is Nothing) Then
            Me.tableCNAE_1.InitVars
        End If
        Me.tablecnae_2 = CType(Me.Tables("cnae_2"),cnae_2DataTable)
        If (Not (Me.tablecnae_2) Is Nothing) Then
            Me.tablecnae_2.InitVars
        End If
        Me.tableCNAE_FINAL = CType(Me.Tables("CNAE_FINAL"),CNAE_FINALDataTable)
        If (Not (Me.tableCNAE_FINAL) Is Nothing) Then
            Me.tableCNAE_FINAL.InitVars
        End If
        Me.tableCBO_Grande_Grupo = CType(Me.Tables("CBO_Grande_Grupo"),CBO_Grande_GrupoDataTable)
        If (Not (Me.tableCBO_Grande_Grupo) Is Nothing) Then
            Me.tableCBO_Grande_Grupo.InitVars
        End If
        Me.tableCBO_Grupo_Base = CType(Me.Tables("CBO_Grupo_Base"),CBO_Grupo_BaseDataTable)
        If (Not (Me.tableCBO_Grupo_Base) Is Nothing) Then
            Me.tableCBO_Grupo_Base.InitVars
        End If
        Me.tableCBO_Grupo_Final = CType(Me.Tables("CBO_Grupo_Final"),CBO_Grupo_FinalDataTable)
        If (Not (Me.tableCBO_Grupo_Final) Is Nothing) Then
            Me.tableCBO_Grupo_Final.InitVars
        End If
        Me.tableCBO_SubGrupo = CType(Me.Tables("CBO_SubGrupo"),CBO_SubGrupoDataTable)
        If (Not (Me.tableCBO_SubGrupo) Is Nothing) Then
            Me.tableCBO_SubGrupo.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("pt-BR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableAmb_completo = New Amb_completoDataTable
        Me.Tables.Add(Me.tableAmb_completo)
        Me.tableAMB1 = New AMB1DataTable
        Me.Tables.Add(Me.tableAMB1)
        Me.tableAMB2 = New AMB2DataTable
        Me.Tables.Add(Me.tableAMB2)
        Me.tableCID_3 = New CID_3DataTable
        Me.Tables.Add(Me.tableCID_3)
        Me.tableCID_4 = New CID_4DataTable
        Me.Tables.Add(Me.tableCID_4)
        Me.tableCID_CAPITULO = New CID_CAPITULODataTable
        Me.Tables.Add(Me.tableCID_CAPITULO)
        Me.tableCID_GRUPO = New CID_GRUPODataTable
        Me.Tables.Add(Me.tableCID_GRUPO)
        Me.tableCRM = New CRMDataTable
        Me.Tables.Add(Me.tableCRM)
        Me.tableTABESPMEDICA = New TABESPMEDICADataTable
        Me.Tables.Add(Me.tableTABESPMEDICA)
        Me.tablePaciente = New PacienteDataTable
        Me.Tables.Add(Me.tablePaciente)
        Me.tableProntuarios = New ProntuariosDataTable
        Me.Tables.Add(Me.tableProntuarios)
        Me.tableCEP_BAI = New CEP_BAIDataTable
        Me.Tables.Add(Me.tableCEP_BAI)
        Me.tableCEP_LOC = New CEP_LOCDataTable
        Me.Tables.Add(Me.tableCEP_LOC)
        Me.tableCEP_LOG = New CEP_LOGDataTable
        Me.Tables.Add(Me.tableCEP_LOG)
        Me.tableCEP_UFS = New CEP_UFSDataTable
        Me.Tables.Add(Me.tableCEP_UFS)
        Me.tableCNAE_1 = New CNAE_1DataTable
        Me.Tables.Add(Me.tableCNAE_1)
        Me.tablecnae_2 = New cnae_2DataTable
        Me.Tables.Add(Me.tablecnae_2)
        Me.tableCNAE_FINAL = New CNAE_FINALDataTable
        Me.Tables.Add(Me.tableCNAE_FINAL)
        Me.tableCBO_Grande_Grupo = New CBO_Grande_GrupoDataTable
        Me.Tables.Add(Me.tableCBO_Grande_Grupo)
        Me.tableCBO_Grupo_Base = New CBO_Grupo_BaseDataTable
        Me.Tables.Add(Me.tableCBO_Grupo_Base)
        Me.tableCBO_Grupo_Final = New CBO_Grupo_FinalDataTable
        Me.Tables.Add(Me.tableCBO_Grupo_Final)
        Me.tableCBO_SubGrupo = New CBO_SubGrupoDataTable
        Me.Tables.Add(Me.tableCBO_SubGrupo)
    End Sub
    
    Private Function ShouldSerializeAmb_completo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAMB1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAMB2() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCID_3() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCID_4() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCID_CAPITULO() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCID_GRUPO() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCRM() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTABESPMEDICA() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePaciente() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeProntuarios() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCEP_BAI() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCEP_LOC() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCEP_LOG() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCEP_UFS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCNAE_1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecnae_2() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCNAE_FINAL() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCBO_Grande_Grupo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCBO_Grupo_Base() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCBO_Grupo_Final() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCBO_SubGrupo() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub Amb_completoRowChangeEventHandler(ByVal sender As Object, ByVal e As Amb_completoRowChangeEvent)
    
    Public Delegate Sub AMB1RowChangeEventHandler(ByVal sender As Object, ByVal e As AMB1RowChangeEvent)
    
    Public Delegate Sub AMB2RowChangeEventHandler(ByVal sender As Object, ByVal e As AMB2RowChangeEvent)
    
    Public Delegate Sub CID_3RowChangeEventHandler(ByVal sender As Object, ByVal e As CID_3RowChangeEvent)
    
    Public Delegate Sub CID_4RowChangeEventHandler(ByVal sender As Object, ByVal e As CID_4RowChangeEvent)
    
    Public Delegate Sub CID_CAPITULORowChangeEventHandler(ByVal sender As Object, ByVal e As CID_CAPITULORowChangeEvent)
    
    Public Delegate Sub CID_GRUPORowChangeEventHandler(ByVal sender As Object, ByVal e As CID_GRUPORowChangeEvent)
    
    Public Delegate Sub CRMRowChangeEventHandler(ByVal sender As Object, ByVal e As CRMRowChangeEvent)
    
    Public Delegate Sub TABESPMEDICARowChangeEventHandler(ByVal sender As Object, ByVal e As TABESPMEDICARowChangeEvent)
    
    Public Delegate Sub PacienteRowChangeEventHandler(ByVal sender As Object, ByVal e As PacienteRowChangeEvent)
    
    Public Delegate Sub ProntuariosRowChangeEventHandler(ByVal sender As Object, ByVal e As ProntuariosRowChangeEvent)
    
    Public Delegate Sub CEP_BAIRowChangeEventHandler(ByVal sender As Object, ByVal e As CEP_BAIRowChangeEvent)
    
    Public Delegate Sub CEP_LOCRowChangeEventHandler(ByVal sender As Object, ByVal e As CEP_LOCRowChangeEvent)
    
    Public Delegate Sub CEP_LOGRowChangeEventHandler(ByVal sender As Object, ByVal e As CEP_LOGRowChangeEvent)
    
    Public Delegate Sub CEP_UFSRowChangeEventHandler(ByVal sender As Object, ByVal e As CEP_UFSRowChangeEvent)
    
    Public Delegate Sub CNAE_1RowChangeEventHandler(ByVal sender As Object, ByVal e As CNAE_1RowChangeEvent)
    
    Public Delegate Sub cnae_2RowChangeEventHandler(ByVal sender As Object, ByVal e As cnae_2RowChangeEvent)
    
    Public Delegate Sub CNAE_FINALRowChangeEventHandler(ByVal sender As Object, ByVal e As CNAE_FINALRowChangeEvent)
    
    Public Delegate Sub CBO_Grande_GrupoRowChangeEventHandler(ByVal sender As Object, ByVal e As CBO_Grande_GrupoRowChangeEvent)
    
    Public Delegate Sub CBO_Grupo_BaseRowChangeEventHandler(ByVal sender As Object, ByVal e As CBO_Grupo_BaseRowChangeEvent)
    
    Public Delegate Sub CBO_Grupo_FinalRowChangeEventHandler(ByVal sender As Object, ByVal e As CBO_Grupo_FinalRowChangeEvent)
    
    Public Delegate Sub CBO_SubGrupoRowChangeEventHandler(ByVal sender As Object, ByVal e As CBO_SubGrupoRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Amb_completoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncodigo_amb As DataColumn
        
        Private columndescricao_amb As DataColumn
        
        Friend Sub New()
            MyBase.New("Amb_completo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codigo_ambColumn As DataColumn
            Get
                Return Me.columncodigo_amb
            End Get
        End Property
        
        Friend ReadOnly Property descricao_ambColumn As DataColumn
            Get
                Return Me.columndescricao_amb
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Amb_completoRow
            Get
                Return CType(Me.Rows(index),Amb_completoRow)
            End Get
        End Property
        
        Public Event Amb_completoRowChanged As Amb_completoRowChangeEventHandler
        
        Public Event Amb_completoRowChanging As Amb_completoRowChangeEventHandler
        
        Public Event Amb_completoRowDeleted As Amb_completoRowChangeEventHandler
        
        Public Event Amb_completoRowDeleting As Amb_completoRowChangeEventHandler
        
        Public Overloads Sub AddAmb_completoRow(ByVal row As Amb_completoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAmb_completoRow(ByVal codigo_amb As String, ByVal descricao_amb As String) As Amb_completoRow
            Dim rowAmb_completoRow As Amb_completoRow = CType(Me.NewRow,Amb_completoRow)
            rowAmb_completoRow.ItemArray = New Object() {codigo_amb, descricao_amb}
            Me.Rows.Add(rowAmb_completoRow)
            Return rowAmb_completoRow
        End Function
        
        Public Function FindBycodigo_amb(ByVal codigo_amb As String) As Amb_completoRow
            Return CType(Me.Rows.Find(New Object() {codigo_amb}),Amb_completoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Amb_completoDataTable = CType(MyBase.Clone,Amb_completoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Amb_completoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncodigo_amb = Me.Columns("codigo_amb")
            Me.columndescricao_amb = Me.Columns("descricao_amb")
        End Sub
        
        Private Sub InitClass()
            Me.columncodigo_amb = New DataColumn("codigo_amb", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncodigo_amb)
            Me.columndescricao_amb = New DataColumn("descricao_amb", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescricao_amb)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncodigo_amb}, true))
            Me.columncodigo_amb.AllowDBNull = false
            Me.columncodigo_amb.Unique = true
        End Sub
        
        Public Function NewAmb_completoRow() As Amb_completoRow
            Return CType(Me.NewRow,Amb_completoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Amb_completoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Amb_completoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Amb_completoRowChangedEvent) Is Nothing) Then
                RaiseEvent Amb_completoRowChanged(Me, New Amb_completoRowChangeEvent(CType(e.Row,Amb_completoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Amb_completoRowChangingEvent) Is Nothing) Then
                RaiseEvent Amb_completoRowChanging(Me, New Amb_completoRowChangeEvent(CType(e.Row,Amb_completoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Amb_completoRowDeletedEvent) Is Nothing) Then
                RaiseEvent Amb_completoRowDeleted(Me, New Amb_completoRowChangeEvent(CType(e.Row,Amb_completoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Amb_completoRowDeletingEvent) Is Nothing) Then
                RaiseEvent Amb_completoRowDeleting(Me, New Amb_completoRowChangeEvent(CType(e.Row,Amb_completoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAmb_completoRow(ByVal row As Amb_completoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Amb_completoRow
        Inherits DataRow
        
        Private tableAmb_completo As Amb_completoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAmb_completo = CType(Me.Table,Amb_completoDataTable)
        End Sub
        
        Public Property codigo_amb As String
            Get
                Return CType(Me(Me.tableAmb_completo.codigo_ambColumn),String)
            End Get
            Set
                Me(Me.tableAmb_completo.codigo_ambColumn) = value
            End Set
        End Property
        
        Public Property descricao_amb As String
            Get
                Try 
                    Return CType(Me(Me.tableAmb_completo.descricao_ambColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAmb_completo.descricao_ambColumn) = value
            End Set
        End Property
        
        Public Function Isdescricao_ambNull() As Boolean
            Return Me.IsNull(Me.tableAmb_completo.descricao_ambColumn)
        End Function
        
        Public Sub Setdescricao_ambNull()
            Me(Me.tableAmb_completo.descricao_ambColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Amb_completoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Amb_completoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Amb_completoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Amb_completoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AMB1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncodigo_capitulo As DataColumn
        
        Private columndescricao_capitulo As DataColumn
        
        Friend Sub New()
            MyBase.New("AMB1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codigo_capituloColumn As DataColumn
            Get
                Return Me.columncodigo_capitulo
            End Get
        End Property
        
        Friend ReadOnly Property descricao_capituloColumn As DataColumn
            Get
                Return Me.columndescricao_capitulo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AMB1Row
            Get
                Return CType(Me.Rows(index),AMB1Row)
            End Get
        End Property
        
        Public Event AMB1RowChanged As AMB1RowChangeEventHandler
        
        Public Event AMB1RowChanging As AMB1RowChangeEventHandler
        
        Public Event AMB1RowDeleted As AMB1RowChangeEventHandler
        
        Public Event AMB1RowDeleting As AMB1RowChangeEventHandler
        
        Public Overloads Sub AddAMB1Row(ByVal row As AMB1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAMB1Row(ByVal codigo_capitulo As String, ByVal descricao_capitulo As String) As AMB1Row
            Dim rowAMB1Row As AMB1Row = CType(Me.NewRow,AMB1Row)
            rowAMB1Row.ItemArray = New Object() {codigo_capitulo, descricao_capitulo}
            Me.Rows.Add(rowAMB1Row)
            Return rowAMB1Row
        End Function
        
        Public Function FindBydescricao_capitulo(ByVal descricao_capitulo As String) As AMB1Row
            Return CType(Me.Rows.Find(New Object() {descricao_capitulo}),AMB1Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AMB1DataTable = CType(MyBase.Clone,AMB1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AMB1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncodigo_capitulo = Me.Columns("codigo_capitulo")
            Me.columndescricao_capitulo = Me.Columns("descricao_capitulo")
        End Sub
        
        Private Sub InitClass()
            Me.columncodigo_capitulo = New DataColumn("codigo_capitulo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncodigo_capitulo)
            Me.columndescricao_capitulo = New DataColumn("descricao_capitulo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescricao_capitulo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columndescricao_capitulo}, true))
            Me.columndescricao_capitulo.AllowDBNull = false
            Me.columndescricao_capitulo.Unique = true
        End Sub
        
        Public Function NewAMB1Row() As AMB1Row
            Return CType(Me.NewRow,AMB1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AMB1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AMB1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AMB1RowChangedEvent) Is Nothing) Then
                RaiseEvent AMB1RowChanged(Me, New AMB1RowChangeEvent(CType(e.Row,AMB1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AMB1RowChangingEvent) Is Nothing) Then
                RaiseEvent AMB1RowChanging(Me, New AMB1RowChangeEvent(CType(e.Row,AMB1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AMB1RowDeletedEvent) Is Nothing) Then
                RaiseEvent AMB1RowDeleted(Me, New AMB1RowChangeEvent(CType(e.Row,AMB1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AMB1RowDeletingEvent) Is Nothing) Then
                RaiseEvent AMB1RowDeleting(Me, New AMB1RowChangeEvent(CType(e.Row,AMB1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAMB1Row(ByVal row As AMB1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AMB1Row
        Inherits DataRow
        
        Private tableAMB1 As AMB1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAMB1 = CType(Me.Table,AMB1DataTable)
        End Sub
        
        Public Property codigo_capitulo As String
            Get
                Try 
                    Return CType(Me(Me.tableAMB1.codigo_capituloColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAMB1.codigo_capituloColumn) = value
            End Set
        End Property
        
        Public Property descricao_capitulo As String
            Get
                Return CType(Me(Me.tableAMB1.descricao_capituloColumn),String)
            End Get
            Set
                Me(Me.tableAMB1.descricao_capituloColumn) = value
            End Set
        End Property
        
        Public Function Iscodigo_capituloNull() As Boolean
            Return Me.IsNull(Me.tableAMB1.codigo_capituloColumn)
        End Function
        
        Public Sub Setcodigo_capituloNull()
            Me(Me.tableAMB1.codigo_capituloColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AMB1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AMB1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AMB1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AMB1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AMB2DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncodigo_subgrupo As DataColumn
        
        Private columndescricao_subgrupo As DataColumn
        
        Friend Sub New()
            MyBase.New("AMB2")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codigo_subgrupoColumn As DataColumn
            Get
                Return Me.columncodigo_subgrupo
            End Get
        End Property
        
        Friend ReadOnly Property descricao_subgrupoColumn As DataColumn
            Get
                Return Me.columndescricao_subgrupo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AMB2Row
            Get
                Return CType(Me.Rows(index),AMB2Row)
            End Get
        End Property
        
        Public Event AMB2RowChanged As AMB2RowChangeEventHandler
        
        Public Event AMB2RowChanging As AMB2RowChangeEventHandler
        
        Public Event AMB2RowDeleted As AMB2RowChangeEventHandler
        
        Public Event AMB2RowDeleting As AMB2RowChangeEventHandler
        
        Public Overloads Sub AddAMB2Row(ByVal row As AMB2Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAMB2Row(ByVal codigo_subgrupo As String, ByVal descricao_subgrupo As String) As AMB2Row
            Dim rowAMB2Row As AMB2Row = CType(Me.NewRow,AMB2Row)
            rowAMB2Row.ItemArray = New Object() {codigo_subgrupo, descricao_subgrupo}
            Me.Rows.Add(rowAMB2Row)
            Return rowAMB2Row
        End Function
        
        Public Function FindBycodigo_subgrupo(ByVal codigo_subgrupo As String) As AMB2Row
            Return CType(Me.Rows.Find(New Object() {codigo_subgrupo}),AMB2Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AMB2DataTable = CType(MyBase.Clone,AMB2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AMB2DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncodigo_subgrupo = Me.Columns("codigo_subgrupo")
            Me.columndescricao_subgrupo = Me.Columns("descricao_subgrupo")
        End Sub
        
        Private Sub InitClass()
            Me.columncodigo_subgrupo = New DataColumn("codigo_subgrupo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncodigo_subgrupo)
            Me.columndescricao_subgrupo = New DataColumn("descricao_subgrupo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescricao_subgrupo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncodigo_subgrupo}, true))
            Me.columncodigo_subgrupo.AllowDBNull = false
            Me.columncodigo_subgrupo.Unique = true
        End Sub
        
        Public Function NewAMB2Row() As AMB2Row
            Return CType(Me.NewRow,AMB2Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AMB2Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AMB2Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AMB2RowChangedEvent) Is Nothing) Then
                RaiseEvent AMB2RowChanged(Me, New AMB2RowChangeEvent(CType(e.Row,AMB2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AMB2RowChangingEvent) Is Nothing) Then
                RaiseEvent AMB2RowChanging(Me, New AMB2RowChangeEvent(CType(e.Row,AMB2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AMB2RowDeletedEvent) Is Nothing) Then
                RaiseEvent AMB2RowDeleted(Me, New AMB2RowChangeEvent(CType(e.Row,AMB2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AMB2RowDeletingEvent) Is Nothing) Then
                RaiseEvent AMB2RowDeleting(Me, New AMB2RowChangeEvent(CType(e.Row,AMB2Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAMB2Row(ByVal row As AMB2Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AMB2Row
        Inherits DataRow
        
        Private tableAMB2 As AMB2DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAMB2 = CType(Me.Table,AMB2DataTable)
        End Sub
        
        Public Property codigo_subgrupo As String
            Get
                Return CType(Me(Me.tableAMB2.codigo_subgrupoColumn),String)
            End Get
            Set
                Me(Me.tableAMB2.codigo_subgrupoColumn) = value
            End Set
        End Property
        
        Public Property descricao_subgrupo As String
            Get
                Try 
                    Return CType(Me(Me.tableAMB2.descricao_subgrupoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAMB2.descricao_subgrupoColumn) = value
            End Set
        End Property
        
        Public Function Isdescricao_subgrupoNull() As Boolean
            Return Me.IsNull(Me.tableAMB2.descricao_subgrupoColumn)
        End Function
        
        Public Sub Setdescricao_subgrupoNull()
            Me(Me.tableAMB2.descricao_subgrupoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AMB2RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AMB2Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AMB2Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AMB2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CID_3DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncd_grupo_codigo As DataColumn
        
        Private columncd_grupo_descricao As DataColumn
        
        Friend Sub New()
            MyBase.New("CID_3")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cd_grupo_codigoColumn As DataColumn
            Get
                Return Me.columncd_grupo_codigo
            End Get
        End Property
        
        Friend ReadOnly Property cd_grupo_descricaoColumn As DataColumn
            Get
                Return Me.columncd_grupo_descricao
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CID_3Row
            Get
                Return CType(Me.Rows(index),CID_3Row)
            End Get
        End Property
        
        Public Event CID_3RowChanged As CID_3RowChangeEventHandler
        
        Public Event CID_3RowChanging As CID_3RowChangeEventHandler
        
        Public Event CID_3RowDeleted As CID_3RowChangeEventHandler
        
        Public Event CID_3RowDeleting As CID_3RowChangeEventHandler
        
        Public Overloads Sub AddCID_3Row(ByVal row As CID_3Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCID_3Row(ByVal cd_grupo_codigo As String, ByVal cd_grupo_descricao As String) As CID_3Row
            Dim rowCID_3Row As CID_3Row = CType(Me.NewRow,CID_3Row)
            rowCID_3Row.ItemArray = New Object() {cd_grupo_codigo, cd_grupo_descricao}
            Me.Rows.Add(rowCID_3Row)
            Return rowCID_3Row
        End Function
        
        Public Function FindBycd_grupo_codigo(ByVal cd_grupo_codigo As String) As CID_3Row
            Return CType(Me.Rows.Find(New Object() {cd_grupo_codigo}),CID_3Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CID_3DataTable = CType(MyBase.Clone,CID_3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CID_3DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncd_grupo_codigo = Me.Columns("cd_grupo_codigo")
            Me.columncd_grupo_descricao = Me.Columns("cd_grupo_descricao")
        End Sub
        
        Private Sub InitClass()
            Me.columncd_grupo_codigo = New DataColumn("cd_grupo_codigo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncd_grupo_codigo)
            Me.columncd_grupo_descricao = New DataColumn("cd_grupo_descricao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncd_grupo_descricao)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncd_grupo_codigo}, true))
            Me.columncd_grupo_codigo.AllowDBNull = false
            Me.columncd_grupo_codigo.Unique = true
        End Sub
        
        Public Function NewCID_3Row() As CID_3Row
            Return CType(Me.NewRow,CID_3Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CID_3Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CID_3Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CID_3RowChangedEvent) Is Nothing) Then
                RaiseEvent CID_3RowChanged(Me, New CID_3RowChangeEvent(CType(e.Row,CID_3Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CID_3RowChangingEvent) Is Nothing) Then
                RaiseEvent CID_3RowChanging(Me, New CID_3RowChangeEvent(CType(e.Row,CID_3Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CID_3RowDeletedEvent) Is Nothing) Then
                RaiseEvent CID_3RowDeleted(Me, New CID_3RowChangeEvent(CType(e.Row,CID_3Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CID_3RowDeletingEvent) Is Nothing) Then
                RaiseEvent CID_3RowDeleting(Me, New CID_3RowChangeEvent(CType(e.Row,CID_3Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCID_3Row(ByVal row As CID_3Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CID_3Row
        Inherits DataRow
        
        Private tableCID_3 As CID_3DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCID_3 = CType(Me.Table,CID_3DataTable)
        End Sub
        
        Public Property cd_grupo_codigo As String
            Get
                Return CType(Me(Me.tableCID_3.cd_grupo_codigoColumn),String)
            End Get
            Set
                Me(Me.tableCID_3.cd_grupo_codigoColumn) = value
            End Set
        End Property
        
        Public Property cd_grupo_descricao As String
            Get
                Try 
                    Return CType(Me(Me.tableCID_3.cd_grupo_descricaoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCID_3.cd_grupo_descricaoColumn) = value
            End Set
        End Property
        
        Public Function Iscd_grupo_descricaoNull() As Boolean
            Return Me.IsNull(Me.tableCID_3.cd_grupo_descricaoColumn)
        End Function
        
        Public Sub Setcd_grupo_descricaoNull()
            Me(Me.tableCID_3.cd_grupo_descricaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CID_3RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CID_3Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CID_3Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CID_3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CID_4DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncodigo_cid As DataColumn
        
        Private columndescricao_cid As DataColumn
        
        Friend Sub New()
            MyBase.New("CID_4")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codigo_cidColumn As DataColumn
            Get
                Return Me.columncodigo_cid
            End Get
        End Property
        
        Friend ReadOnly Property descricao_cidColumn As DataColumn
            Get
                Return Me.columndescricao_cid
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CID_4Row
            Get
                Return CType(Me.Rows(index),CID_4Row)
            End Get
        End Property
        
        Public Event CID_4RowChanged As CID_4RowChangeEventHandler
        
        Public Event CID_4RowChanging As CID_4RowChangeEventHandler
        
        Public Event CID_4RowDeleted As CID_4RowChangeEventHandler
        
        Public Event CID_4RowDeleting As CID_4RowChangeEventHandler
        
        Public Overloads Sub AddCID_4Row(ByVal row As CID_4Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCID_4Row(ByVal codigo_cid As String, ByVal descricao_cid As String) As CID_4Row
            Dim rowCID_4Row As CID_4Row = CType(Me.NewRow,CID_4Row)
            rowCID_4Row.ItemArray = New Object() {codigo_cid, descricao_cid}
            Me.Rows.Add(rowCID_4Row)
            Return rowCID_4Row
        End Function
        
        Public Function FindBycodigo_cid(ByVal codigo_cid As String) As CID_4Row
            Return CType(Me.Rows.Find(New Object() {codigo_cid}),CID_4Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CID_4DataTable = CType(MyBase.Clone,CID_4DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CID_4DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncodigo_cid = Me.Columns("codigo_cid")
            Me.columndescricao_cid = Me.Columns("descricao_cid")
        End Sub
        
        Private Sub InitClass()
            Me.columncodigo_cid = New DataColumn("codigo_cid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncodigo_cid)
            Me.columndescricao_cid = New DataColumn("descricao_cid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescricao_cid)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncodigo_cid}, true))
            Me.columncodigo_cid.AllowDBNull = false
            Me.columncodigo_cid.Unique = true
        End Sub
        
        Public Function NewCID_4Row() As CID_4Row
            Return CType(Me.NewRow,CID_4Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CID_4Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CID_4Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CID_4RowChangedEvent) Is Nothing) Then
                RaiseEvent CID_4RowChanged(Me, New CID_4RowChangeEvent(CType(e.Row,CID_4Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CID_4RowChangingEvent) Is Nothing) Then
                RaiseEvent CID_4RowChanging(Me, New CID_4RowChangeEvent(CType(e.Row,CID_4Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CID_4RowDeletedEvent) Is Nothing) Then
                RaiseEvent CID_4RowDeleted(Me, New CID_4RowChangeEvent(CType(e.Row,CID_4Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CID_4RowDeletingEvent) Is Nothing) Then
                RaiseEvent CID_4RowDeleting(Me, New CID_4RowChangeEvent(CType(e.Row,CID_4Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCID_4Row(ByVal row As CID_4Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CID_4Row
        Inherits DataRow
        
        Private tableCID_4 As CID_4DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCID_4 = CType(Me.Table,CID_4DataTable)
        End Sub
        
        Public Property codigo_cid As String
            Get
                Return CType(Me(Me.tableCID_4.codigo_cidColumn),String)
            End Get
            Set
                Me(Me.tableCID_4.codigo_cidColumn) = value
            End Set
        End Property
        
        Public Property descricao_cid As String
            Get
                Try 
                    Return CType(Me(Me.tableCID_4.descricao_cidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCID_4.descricao_cidColumn) = value
            End Set
        End Property
        
        Public Function Isdescricao_cidNull() As Boolean
            Return Me.IsNull(Me.tableCID_4.descricao_cidColumn)
        End Function
        
        Public Sub Setdescricao_cidNull()
            Me(Me.tableCID_4.descricao_cidColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CID_4RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CID_4Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CID_4Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CID_4Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CID_CAPITULODataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCAPITULO_CID_FINAL As DataColumn
        
        Private columnCAPITULO_CID_INICIAL As DataColumn
        
        Private columnCAPITULO_CODIGO As DataColumn
        
        Private columncapitulo_descricao As DataColumn
        
        Friend Sub New()
            MyBase.New("CID_CAPITULO")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CAPITULO_CID_FINALColumn As DataColumn
            Get
                Return Me.columnCAPITULO_CID_FINAL
            End Get
        End Property
        
        Friend ReadOnly Property CAPITULO_CID_INICIALColumn As DataColumn
            Get
                Return Me.columnCAPITULO_CID_INICIAL
            End Get
        End Property
        
        Friend ReadOnly Property CAPITULO_CODIGOColumn As DataColumn
            Get
                Return Me.columnCAPITULO_CODIGO
            End Get
        End Property
        
        Friend ReadOnly Property capitulo_descricaoColumn As DataColumn
            Get
                Return Me.columncapitulo_descricao
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CID_CAPITULORow
            Get
                Return CType(Me.Rows(index),CID_CAPITULORow)
            End Get
        End Property
        
        Public Event CID_CAPITULORowChanged As CID_CAPITULORowChangeEventHandler
        
        Public Event CID_CAPITULORowChanging As CID_CAPITULORowChangeEventHandler
        
        Public Event CID_CAPITULORowDeleted As CID_CAPITULORowChangeEventHandler
        
        Public Event CID_CAPITULORowDeleting As CID_CAPITULORowChangeEventHandler
        
        Public Overloads Sub AddCID_CAPITULORow(ByVal row As CID_CAPITULORow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCID_CAPITULORow(ByVal CAPITULO_CID_FINAL As String, ByVal CAPITULO_CID_INICIAL As String, ByVal CAPITULO_CODIGO As String, ByVal capitulo_descricao As String) As CID_CAPITULORow
            Dim rowCID_CAPITULORow As CID_CAPITULORow = CType(Me.NewRow,CID_CAPITULORow)
            rowCID_CAPITULORow.ItemArray = New Object() {CAPITULO_CID_FINAL, CAPITULO_CID_INICIAL, CAPITULO_CODIGO, capitulo_descricao}
            Me.Rows.Add(rowCID_CAPITULORow)
            Return rowCID_CAPITULORow
        End Function
        
        Public Function FindByCAPITULO_CODIGO(ByVal CAPITULO_CODIGO As String) As CID_CAPITULORow
            Return CType(Me.Rows.Find(New Object() {CAPITULO_CODIGO}),CID_CAPITULORow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CID_CAPITULODataTable = CType(MyBase.Clone,CID_CAPITULODataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CID_CAPITULODataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCAPITULO_CID_FINAL = Me.Columns("CAPITULO_CID_FINAL")
            Me.columnCAPITULO_CID_INICIAL = Me.Columns("CAPITULO_CID_INICIAL")
            Me.columnCAPITULO_CODIGO = Me.Columns("CAPITULO_CODIGO")
            Me.columncapitulo_descricao = Me.Columns("capitulo_descricao")
        End Sub
        
        Private Sub InitClass()
            Me.columnCAPITULO_CID_FINAL = New DataColumn("CAPITULO_CID_FINAL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCAPITULO_CID_FINAL)
            Me.columnCAPITULO_CID_INICIAL = New DataColumn("CAPITULO_CID_INICIAL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCAPITULO_CID_INICIAL)
            Me.columnCAPITULO_CODIGO = New DataColumn("CAPITULO_CODIGO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCAPITULO_CODIGO)
            Me.columncapitulo_descricao = New DataColumn("capitulo_descricao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncapitulo_descricao)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCAPITULO_CODIGO}, true))
            Me.columnCAPITULO_CODIGO.AllowDBNull = false
            Me.columnCAPITULO_CODIGO.Unique = true
        End Sub
        
        Public Function NewCID_CAPITULORow() As CID_CAPITULORow
            Return CType(Me.NewRow,CID_CAPITULORow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CID_CAPITULORow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CID_CAPITULORow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CID_CAPITULORowChangedEvent) Is Nothing) Then
                RaiseEvent CID_CAPITULORowChanged(Me, New CID_CAPITULORowChangeEvent(CType(e.Row,CID_CAPITULORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CID_CAPITULORowChangingEvent) Is Nothing) Then
                RaiseEvent CID_CAPITULORowChanging(Me, New CID_CAPITULORowChangeEvent(CType(e.Row,CID_CAPITULORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CID_CAPITULORowDeletedEvent) Is Nothing) Then
                RaiseEvent CID_CAPITULORowDeleted(Me, New CID_CAPITULORowChangeEvent(CType(e.Row,CID_CAPITULORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CID_CAPITULORowDeletingEvent) Is Nothing) Then
                RaiseEvent CID_CAPITULORowDeleting(Me, New CID_CAPITULORowChangeEvent(CType(e.Row,CID_CAPITULORow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCID_CAPITULORow(ByVal row As CID_CAPITULORow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CID_CAPITULORow
        Inherits DataRow
        
        Private tableCID_CAPITULO As CID_CAPITULODataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCID_CAPITULO = CType(Me.Table,CID_CAPITULODataTable)
        End Sub
        
        Public Property CAPITULO_CID_FINAL As String
            Get
                Try 
                    Return CType(Me(Me.tableCID_CAPITULO.CAPITULO_CID_FINALColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCID_CAPITULO.CAPITULO_CID_FINALColumn) = value
            End Set
        End Property
        
        Public Property CAPITULO_CID_INICIAL As String
            Get
                Try 
                    Return CType(Me(Me.tableCID_CAPITULO.CAPITULO_CID_INICIALColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCID_CAPITULO.CAPITULO_CID_INICIALColumn) = value
            End Set
        End Property
        
        Public Property CAPITULO_CODIGO As String
            Get
                Return CType(Me(Me.tableCID_CAPITULO.CAPITULO_CODIGOColumn),String)
            End Get
            Set
                Me(Me.tableCID_CAPITULO.CAPITULO_CODIGOColumn) = value
            End Set
        End Property
        
        Public Property capitulo_descricao As String
            Get
                Try 
                    Return CType(Me(Me.tableCID_CAPITULO.capitulo_descricaoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCID_CAPITULO.capitulo_descricaoColumn) = value
            End Set
        End Property
        
        Public Function IsCAPITULO_CID_FINALNull() As Boolean
            Return Me.IsNull(Me.tableCID_CAPITULO.CAPITULO_CID_FINALColumn)
        End Function
        
        Public Sub SetCAPITULO_CID_FINALNull()
            Me(Me.tableCID_CAPITULO.CAPITULO_CID_FINALColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCAPITULO_CID_INICIALNull() As Boolean
            Return Me.IsNull(Me.tableCID_CAPITULO.CAPITULO_CID_INICIALColumn)
        End Function
        
        Public Sub SetCAPITULO_CID_INICIALNull()
            Me(Me.tableCID_CAPITULO.CAPITULO_CID_INICIALColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscapitulo_descricaoNull() As Boolean
            Return Me.IsNull(Me.tableCID_CAPITULO.capitulo_descricaoColumn)
        End Function
        
        Public Sub Setcapitulo_descricaoNull()
            Me(Me.tableCID_CAPITULO.capitulo_descricaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CID_CAPITULORowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CID_CAPITULORow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CID_CAPITULORow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CID_CAPITULORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CID_GRUPODataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCG_CID_FINAL As DataColumn
        
        Private columnCG_CID_INICIAL As DataColumn
        
        Private columnCG_CODIGO As DataColumn
        
        Private columnCG_DESCRICAO As DataColumn
        
        Friend Sub New()
            MyBase.New("CID_GRUPO")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CG_CID_FINALColumn As DataColumn
            Get
                Return Me.columnCG_CID_FINAL
            End Get
        End Property
        
        Friend ReadOnly Property CG_CID_INICIALColumn As DataColumn
            Get
                Return Me.columnCG_CID_INICIAL
            End Get
        End Property
        
        Friend ReadOnly Property CG_CODIGOColumn As DataColumn
            Get
                Return Me.columnCG_CODIGO
            End Get
        End Property
        
        Friend ReadOnly Property CG_DESCRICAOColumn As DataColumn
            Get
                Return Me.columnCG_DESCRICAO
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CID_GRUPORow
            Get
                Return CType(Me.Rows(index),CID_GRUPORow)
            End Get
        End Property
        
        Public Event CID_GRUPORowChanged As CID_GRUPORowChangeEventHandler
        
        Public Event CID_GRUPORowChanging As CID_GRUPORowChangeEventHandler
        
        Public Event CID_GRUPORowDeleted As CID_GRUPORowChangeEventHandler
        
        Public Event CID_GRUPORowDeleting As CID_GRUPORowChangeEventHandler
        
        Public Overloads Sub AddCID_GRUPORow(ByVal row As CID_GRUPORow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCID_GRUPORow(ByVal CG_CID_FINAL As String, ByVal CG_CID_INICIAL As String, ByVal CG_CODIGO As String, ByVal CG_DESCRICAO As String) As CID_GRUPORow
            Dim rowCID_GRUPORow As CID_GRUPORow = CType(Me.NewRow,CID_GRUPORow)
            rowCID_GRUPORow.ItemArray = New Object() {CG_CID_FINAL, CG_CID_INICIAL, CG_CODIGO, CG_DESCRICAO}
            Me.Rows.Add(rowCID_GRUPORow)
            Return rowCID_GRUPORow
        End Function
        
        Public Function FindByCG_DESCRICAO(ByVal CG_DESCRICAO As String) As CID_GRUPORow
            Return CType(Me.Rows.Find(New Object() {CG_DESCRICAO}),CID_GRUPORow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CID_GRUPODataTable = CType(MyBase.Clone,CID_GRUPODataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CID_GRUPODataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCG_CID_FINAL = Me.Columns("CG_CID_FINAL")
            Me.columnCG_CID_INICIAL = Me.Columns("CG_CID_INICIAL")
            Me.columnCG_CODIGO = Me.Columns("CG_CODIGO")
            Me.columnCG_DESCRICAO = Me.Columns("CG_DESCRICAO")
        End Sub
        
        Private Sub InitClass()
            Me.columnCG_CID_FINAL = New DataColumn("CG_CID_FINAL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCG_CID_FINAL)
            Me.columnCG_CID_INICIAL = New DataColumn("CG_CID_INICIAL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCG_CID_INICIAL)
            Me.columnCG_CODIGO = New DataColumn("CG_CODIGO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCG_CODIGO)
            Me.columnCG_DESCRICAO = New DataColumn("CG_DESCRICAO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCG_DESCRICAO)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCG_DESCRICAO}, true))
            Me.columnCG_DESCRICAO.AllowDBNull = false
            Me.columnCG_DESCRICAO.Unique = true
        End Sub
        
        Public Function NewCID_GRUPORow() As CID_GRUPORow
            Return CType(Me.NewRow,CID_GRUPORow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CID_GRUPORow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CID_GRUPORow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CID_GRUPORowChangedEvent) Is Nothing) Then
                RaiseEvent CID_GRUPORowChanged(Me, New CID_GRUPORowChangeEvent(CType(e.Row,CID_GRUPORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CID_GRUPORowChangingEvent) Is Nothing) Then
                RaiseEvent CID_GRUPORowChanging(Me, New CID_GRUPORowChangeEvent(CType(e.Row,CID_GRUPORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CID_GRUPORowDeletedEvent) Is Nothing) Then
                RaiseEvent CID_GRUPORowDeleted(Me, New CID_GRUPORowChangeEvent(CType(e.Row,CID_GRUPORow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CID_GRUPORowDeletingEvent) Is Nothing) Then
                RaiseEvent CID_GRUPORowDeleting(Me, New CID_GRUPORowChangeEvent(CType(e.Row,CID_GRUPORow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCID_GRUPORow(ByVal row As CID_GRUPORow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CID_GRUPORow
        Inherits DataRow
        
        Private tableCID_GRUPO As CID_GRUPODataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCID_GRUPO = CType(Me.Table,CID_GRUPODataTable)
        End Sub
        
        Public Property CG_CID_FINAL As String
            Get
                Try 
                    Return CType(Me(Me.tableCID_GRUPO.CG_CID_FINALColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCID_GRUPO.CG_CID_FINALColumn) = value
            End Set
        End Property
        
        Public Property CG_CID_INICIAL As String
            Get
                Try 
                    Return CType(Me(Me.tableCID_GRUPO.CG_CID_INICIALColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCID_GRUPO.CG_CID_INICIALColumn) = value
            End Set
        End Property
        
        Public Property CG_CODIGO As String
            Get
                Try 
                    Return CType(Me(Me.tableCID_GRUPO.CG_CODIGOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCID_GRUPO.CG_CODIGOColumn) = value
            End Set
        End Property
        
        Public Property CG_DESCRICAO As String
            Get
                Return CType(Me(Me.tableCID_GRUPO.CG_DESCRICAOColumn),String)
            End Get
            Set
                Me(Me.tableCID_GRUPO.CG_DESCRICAOColumn) = value
            End Set
        End Property
        
        Public Function IsCG_CID_FINALNull() As Boolean
            Return Me.IsNull(Me.tableCID_GRUPO.CG_CID_FINALColumn)
        End Function
        
        Public Sub SetCG_CID_FINALNull()
            Me(Me.tableCID_GRUPO.CG_CID_FINALColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCG_CID_INICIALNull() As Boolean
            Return Me.IsNull(Me.tableCID_GRUPO.CG_CID_INICIALColumn)
        End Function
        
        Public Sub SetCG_CID_INICIALNull()
            Me(Me.tableCID_GRUPO.CG_CID_INICIALColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCG_CODIGONull() As Boolean
            Return Me.IsNull(Me.tableCID_GRUPO.CG_CODIGOColumn)
        End Function
        
        Public Sub SetCG_CODIGONull()
            Me(Me.tableCID_GRUPO.CG_CODIGOColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CID_GRUPORowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CID_GRUPORow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CID_GRUPORow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CID_GRUPORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CRMDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodCRM As DataColumn
        
        Private columnEspecialidade As DataColumn
        
        Private columnNome As DataColumn
        
        Friend Sub New()
            MyBase.New("CRM")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodCRMColumn As DataColumn
            Get
                Return Me.columnCodCRM
            End Get
        End Property
        
        Friend ReadOnly Property EspecialidadeColumn As DataColumn
            Get
                Return Me.columnEspecialidade
            End Get
        End Property
        
        Friend ReadOnly Property NomeColumn As DataColumn
            Get
                Return Me.columnNome
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CRMRow
            Get
                Return CType(Me.Rows(index),CRMRow)
            End Get
        End Property
        
        Public Event CRMRowChanged As CRMRowChangeEventHandler
        
        Public Event CRMRowChanging As CRMRowChangeEventHandler
        
        Public Event CRMRowDeleted As CRMRowChangeEventHandler
        
        Public Event CRMRowDeleting As CRMRowChangeEventHandler
        
        Public Overloads Sub AddCRMRow(ByVal row As CRMRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCRMRow(ByVal CodCRM As String, ByVal Especialidade As String, ByVal Nome As String) As CRMRow
            Dim rowCRMRow As CRMRow = CType(Me.NewRow,CRMRow)
            rowCRMRow.ItemArray = New Object() {CodCRM, Especialidade, Nome}
            Me.Rows.Add(rowCRMRow)
            Return rowCRMRow
        End Function
        
        Public Function FindByCodCRM(ByVal CodCRM As String) As CRMRow
            Return CType(Me.Rows.Find(New Object() {CodCRM}),CRMRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CRMDataTable = CType(MyBase.Clone,CRMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CRMDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodCRM = Me.Columns("CodCRM")
            Me.columnEspecialidade = Me.Columns("Especialidade")
            Me.columnNome = Me.Columns("Nome")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodCRM = New DataColumn("CodCRM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodCRM)
            Me.columnEspecialidade = New DataColumn("Especialidade", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEspecialidade)
            Me.columnNome = New DataColumn("Nome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNome)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCodCRM}, true))
            Me.columnCodCRM.AllowDBNull = false
            Me.columnCodCRM.Unique = true
        End Sub
        
        Public Function NewCRMRow() As CRMRow
            Return CType(Me.NewRow,CRMRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CRMRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CRMRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CRMRowChangedEvent) Is Nothing) Then
                RaiseEvent CRMRowChanged(Me, New CRMRowChangeEvent(CType(e.Row,CRMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CRMRowChangingEvent) Is Nothing) Then
                RaiseEvent CRMRowChanging(Me, New CRMRowChangeEvent(CType(e.Row,CRMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CRMRowDeletedEvent) Is Nothing) Then
                RaiseEvent CRMRowDeleted(Me, New CRMRowChangeEvent(CType(e.Row,CRMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CRMRowDeletingEvent) Is Nothing) Then
                RaiseEvent CRMRowDeleting(Me, New CRMRowChangeEvent(CType(e.Row,CRMRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCRMRow(ByVal row As CRMRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CRMRow
        Inherits DataRow
        
        Private tableCRM As CRMDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCRM = CType(Me.Table,CRMDataTable)
        End Sub
        
        Public Property CodCRM As String
            Get
                Return CType(Me(Me.tableCRM.CodCRMColumn),String)
            End Get
            Set
                Me(Me.tableCRM.CodCRMColumn) = value
            End Set
        End Property
        
        Public Property Especialidade As String
            Get
                Try 
                    Return CType(Me(Me.tableCRM.EspecialidadeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCRM.EspecialidadeColumn) = value
            End Set
        End Property
        
        Public Property Nome As String
            Get
                Try 
                    Return CType(Me(Me.tableCRM.NomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCRM.NomeColumn) = value
            End Set
        End Property
        
        Public Function IsEspecialidadeNull() As Boolean
            Return Me.IsNull(Me.tableCRM.EspecialidadeColumn)
        End Function
        
        Public Sub SetEspecialidadeNull()
            Me(Me.tableCRM.EspecialidadeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNomeNull() As Boolean
            Return Me.IsNull(Me.tableCRM.NomeColumn)
        End Function
        
        Public Sub SetNomeNull()
            Me(Me.tableCRM.NomeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CRMRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CRMRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CRMRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CRMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TABESPMEDICADataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncodigo As DataColumn
        
        Private columnEspecialidade As DataColumn
        
        Friend Sub New()
            MyBase.New("TABESPMEDICA")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property codigoColumn As DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        Friend ReadOnly Property EspecialidadeColumn As DataColumn
            Get
                Return Me.columnEspecialidade
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TABESPMEDICARow
            Get
                Return CType(Me.Rows(index),TABESPMEDICARow)
            End Get
        End Property
        
        Public Event TABESPMEDICARowChanged As TABESPMEDICARowChangeEventHandler
        
        Public Event TABESPMEDICARowChanging As TABESPMEDICARowChangeEventHandler
        
        Public Event TABESPMEDICARowDeleted As TABESPMEDICARowChangeEventHandler
        
        Public Event TABESPMEDICARowDeleting As TABESPMEDICARowChangeEventHandler
        
        Public Overloads Sub AddTABESPMEDICARow(ByVal row As TABESPMEDICARow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTABESPMEDICARow(ByVal codigo As Integer, ByVal Especialidade As String) As TABESPMEDICARow
            Dim rowTABESPMEDICARow As TABESPMEDICARow = CType(Me.NewRow,TABESPMEDICARow)
            rowTABESPMEDICARow.ItemArray = New Object() {codigo, Especialidade}
            Me.Rows.Add(rowTABESPMEDICARow)
            Return rowTABESPMEDICARow
        End Function
        
        Public Function FindBycodigo(ByVal codigo As Integer) As TABESPMEDICARow
            Return CType(Me.Rows.Find(New Object() {codigo}),TABESPMEDICARow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TABESPMEDICADataTable = CType(MyBase.Clone,TABESPMEDICADataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TABESPMEDICADataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncodigo = Me.Columns("codigo")
            Me.columnEspecialidade = Me.Columns("Especialidade")
        End Sub
        
        Private Sub InitClass()
            Me.columncodigo = New DataColumn("codigo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncodigo)
            Me.columnEspecialidade = New DataColumn("Especialidade", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEspecialidade)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncodigo}, true))
            Me.columncodigo.AllowDBNull = false
            Me.columncodigo.Unique = true
        End Sub
        
        Public Function NewTABESPMEDICARow() As TABESPMEDICARow
            Return CType(Me.NewRow,TABESPMEDICARow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TABESPMEDICARow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TABESPMEDICARow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TABESPMEDICARowChangedEvent) Is Nothing) Then
                RaiseEvent TABESPMEDICARowChanged(Me, New TABESPMEDICARowChangeEvent(CType(e.Row,TABESPMEDICARow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TABESPMEDICARowChangingEvent) Is Nothing) Then
                RaiseEvent TABESPMEDICARowChanging(Me, New TABESPMEDICARowChangeEvent(CType(e.Row,TABESPMEDICARow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TABESPMEDICARowDeletedEvent) Is Nothing) Then
                RaiseEvent TABESPMEDICARowDeleted(Me, New TABESPMEDICARowChangeEvent(CType(e.Row,TABESPMEDICARow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TABESPMEDICARowDeletingEvent) Is Nothing) Then
                RaiseEvent TABESPMEDICARowDeleting(Me, New TABESPMEDICARowChangeEvent(CType(e.Row,TABESPMEDICARow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTABESPMEDICARow(ByVal row As TABESPMEDICARow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TABESPMEDICARow
        Inherits DataRow
        
        Private tableTABESPMEDICA As TABESPMEDICADataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTABESPMEDICA = CType(Me.Table,TABESPMEDICADataTable)
        End Sub
        
        Public Property codigo As Integer
            Get
                Return CType(Me(Me.tableTABESPMEDICA.codigoColumn),Integer)
            End Get
            Set
                Me(Me.tableTABESPMEDICA.codigoColumn) = value
            End Set
        End Property
        
        Public Property Especialidade As String
            Get
                Try 
                    Return CType(Me(Me.tableTABESPMEDICA.EspecialidadeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTABESPMEDICA.EspecialidadeColumn) = value
            End Set
        End Property
        
        Public Function IsEspecialidadeNull() As Boolean
            Return Me.IsNull(Me.tableTABESPMEDICA.EspecialidadeColumn)
        End Function
        
        Public Sub SetEspecialidadeNull()
            Me(Me.tableTABESPMEDICA.EspecialidadeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TABESPMEDICARowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TABESPMEDICARow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TABESPMEDICARow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TABESPMEDICARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PacienteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPaciente_Codigo As DataColumn
        
        Private columnPaciente_Nome As DataColumn
        
        Private columnData_Nasc As DataColumn
        
        Friend Sub New()
            MyBase.New("Paciente")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Paciente_CodigoColumn As DataColumn
            Get
                Return Me.columnPaciente_Codigo
            End Get
        End Property
        
        Friend ReadOnly Property Paciente_NomeColumn As DataColumn
            Get
                Return Me.columnPaciente_Nome
            End Get
        End Property
        
        Friend ReadOnly Property Data_NascColumn As DataColumn
            Get
                Return Me.columnData_Nasc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PacienteRow
            Get
                Return CType(Me.Rows(index),PacienteRow)
            End Get
        End Property
        
        Public Event PacienteRowChanged As PacienteRowChangeEventHandler
        
        Public Event PacienteRowChanging As PacienteRowChangeEventHandler
        
        Public Event PacienteRowDeleted As PacienteRowChangeEventHandler
        
        Public Event PacienteRowDeleting As PacienteRowChangeEventHandler
        
        Public Overloads Sub AddPacienteRow(ByVal row As PacienteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPacienteRow(ByVal Paciente_Codigo As String, ByVal Paciente_Nome As String, ByVal Data_Nasc As Date) As PacienteRow
            Dim rowPacienteRow As PacienteRow = CType(Me.NewRow,PacienteRow)
            rowPacienteRow.ItemArray = New Object() {Paciente_Codigo, Paciente_Nome, Data_Nasc}
            Me.Rows.Add(rowPacienteRow)
            Return rowPacienteRow
        End Function
        
        Public Function FindByPaciente_Codigo(ByVal Paciente_Codigo As String) As PacienteRow
            Return CType(Me.Rows.Find(New Object() {Paciente_Codigo}),PacienteRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PacienteDataTable = CType(MyBase.Clone,PacienteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PacienteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPaciente_Codigo = Me.Columns("Paciente_Codigo")
            Me.columnPaciente_Nome = Me.Columns("Paciente_Nome")
            Me.columnData_Nasc = Me.Columns("Data_Nasc")
        End Sub
        
        Private Sub InitClass()
            Me.columnPaciente_Codigo = New DataColumn("Paciente_Codigo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaciente_Codigo)
            Me.columnPaciente_Nome = New DataColumn("Paciente_Nome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaciente_Nome)
            Me.columnData_Nasc = New DataColumn("Data_Nasc", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnData_Nasc)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnPaciente_Codigo}, true))
            Me.columnPaciente_Codigo.AllowDBNull = false
            Me.columnPaciente_Codigo.Unique = true
        End Sub
        
        Public Function NewPacienteRow() As PacienteRow
            Return CType(Me.NewRow,PacienteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PacienteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PacienteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PacienteRowChangedEvent) Is Nothing) Then
                RaiseEvent PacienteRowChanged(Me, New PacienteRowChangeEvent(CType(e.Row,PacienteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PacienteRowChangingEvent) Is Nothing) Then
                RaiseEvent PacienteRowChanging(Me, New PacienteRowChangeEvent(CType(e.Row,PacienteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PacienteRowDeletedEvent) Is Nothing) Then
                RaiseEvent PacienteRowDeleted(Me, New PacienteRowChangeEvent(CType(e.Row,PacienteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PacienteRowDeletingEvent) Is Nothing) Then
                RaiseEvent PacienteRowDeleting(Me, New PacienteRowChangeEvent(CType(e.Row,PacienteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePacienteRow(ByVal row As PacienteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PacienteRow
        Inherits DataRow
        
        Private tablePaciente As PacienteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePaciente = CType(Me.Table,PacienteDataTable)
        End Sub
        
        Public Property Paciente_Codigo As String
            Get
                Return CType(Me(Me.tablePaciente.Paciente_CodigoColumn),String)
            End Get
            Set
                Me(Me.tablePaciente.Paciente_CodigoColumn) = value
            End Set
        End Property
        
        Public Property Paciente_Nome As String
            Get
                Try 
                    Return CType(Me(Me.tablePaciente.Paciente_NomeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaciente.Paciente_NomeColumn) = value
            End Set
        End Property
        
        Public Property Data_Nasc As Date
            Get
                Try 
                    Return CType(Me(Me.tablePaciente.Data_NascColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaciente.Data_NascColumn) = value
            End Set
        End Property
        
        Public Function IsPaciente_NomeNull() As Boolean
            Return Me.IsNull(Me.tablePaciente.Paciente_NomeColumn)
        End Function
        
        Public Sub SetPaciente_NomeNull()
            Me(Me.tablePaciente.Paciente_NomeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsData_NascNull() As Boolean
            Return Me.IsNull(Me.tablePaciente.Data_NascColumn)
        End Function
        
        Public Sub SetData_NascNull()
            Me(Me.tablePaciente.Data_NascColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PacienteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PacienteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PacienteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PacienteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProntuariosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnUsuarioID As DataColumn
        
        Private columnEventoID As DataColumn
        
        Private columnEventoData As DataColumn
        
        Private columnXML_Bin As DataColumn
        
        Friend Sub New()
            MyBase.New("Prontuarios")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property UsuarioIDColumn As DataColumn
            Get
                Return Me.columnUsuarioID
            End Get
        End Property
        
        Friend ReadOnly Property EventoIDColumn As DataColumn
            Get
                Return Me.columnEventoID
            End Get
        End Property
        
        Friend ReadOnly Property EventoDataColumn As DataColumn
            Get
                Return Me.columnEventoData
            End Get
        End Property
        
        Friend ReadOnly Property XML_BinColumn As DataColumn
            Get
                Return Me.columnXML_Bin
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProntuariosRow
            Get
                Return CType(Me.Rows(index),ProntuariosRow)
            End Get
        End Property
        
        Public Event ProntuariosRowChanged As ProntuariosRowChangeEventHandler
        
        Public Event ProntuariosRowChanging As ProntuariosRowChangeEventHandler
        
        Public Event ProntuariosRowDeleted As ProntuariosRowChangeEventHandler
        
        Public Event ProntuariosRowDeleting As ProntuariosRowChangeEventHandler
        
        Public Overloads Sub AddProntuariosRow(ByVal row As ProntuariosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddProntuariosRow(ByVal UsuarioID As String, ByVal EventoID As String, ByVal EventoData As Date, ByVal XML_Bin As String) As ProntuariosRow
            Dim rowProntuariosRow As ProntuariosRow = CType(Me.NewRow,ProntuariosRow)
            rowProntuariosRow.ItemArray = New Object() {UsuarioID, EventoID, EventoData, XML_Bin}
            Me.Rows.Add(rowProntuariosRow)
            Return rowProntuariosRow
        End Function
        
        Public Function FindByUsuarioIDEventoIDEventoData(ByVal UsuarioID As String, ByVal EventoID As String, ByVal EventoData As Date) As ProntuariosRow
            Return CType(Me.Rows.Find(New Object() {UsuarioID, EventoID, EventoData}),ProntuariosRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ProntuariosDataTable = CType(MyBase.Clone,ProntuariosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ProntuariosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnUsuarioID = Me.Columns("UsuarioID")
            Me.columnEventoID = Me.Columns("EventoID")
            Me.columnEventoData = Me.Columns("EventoData")
            Me.columnXML_Bin = Me.Columns("XML_Bin")
        End Sub
        
        Private Sub InitClass()
            Me.columnUsuarioID = New DataColumn("UsuarioID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUsuarioID)
            Me.columnEventoID = New DataColumn("EventoID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEventoID)
            Me.columnEventoData = New DataColumn("EventoData", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEventoData)
            Me.columnXML_Bin = New DataColumn("XML_Bin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnXML_Bin)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnUsuarioID, Me.columnEventoID, Me.columnEventoData}, true))
            Me.columnUsuarioID.AllowDBNull = false
            Me.columnEventoID.AllowDBNull = false
            Me.columnEventoData.AllowDBNull = false
        End Sub
        
        Public Function NewProntuariosRow() As ProntuariosRow
            Return CType(Me.NewRow,ProntuariosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ProntuariosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProntuariosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProntuariosRowChangedEvent) Is Nothing) Then
                RaiseEvent ProntuariosRowChanged(Me, New ProntuariosRowChangeEvent(CType(e.Row,ProntuariosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProntuariosRowChangingEvent) Is Nothing) Then
                RaiseEvent ProntuariosRowChanging(Me, New ProntuariosRowChangeEvent(CType(e.Row,ProntuariosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProntuariosRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProntuariosRowDeleted(Me, New ProntuariosRowChangeEvent(CType(e.Row,ProntuariosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProntuariosRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProntuariosRowDeleting(Me, New ProntuariosRowChangeEvent(CType(e.Row,ProntuariosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveProntuariosRow(ByVal row As ProntuariosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProntuariosRow
        Inherits DataRow
        
        Private tableProntuarios As ProntuariosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableProntuarios = CType(Me.Table,ProntuariosDataTable)
        End Sub
        
        Public Property UsuarioID As String
            Get
                Return CType(Me(Me.tableProntuarios.UsuarioIDColumn),String)
            End Get
            Set
                Me(Me.tableProntuarios.UsuarioIDColumn) = value
            End Set
        End Property
        
        Public Property EventoID As String
            Get
                Return CType(Me(Me.tableProntuarios.EventoIDColumn),String)
            End Get
            Set
                Me(Me.tableProntuarios.EventoIDColumn) = value
            End Set
        End Property
        
        Public Property EventoData As Date
            Get
                Return CType(Me(Me.tableProntuarios.EventoDataColumn),Date)
            End Get
            Set
                Me(Me.tableProntuarios.EventoDataColumn) = value
            End Set
        End Property
        
        Public Property XML_Bin As String
            Get
                Try 
                    Return CType(Me(Me.tableProntuarios.XML_BinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProntuarios.XML_BinColumn) = value
            End Set
        End Property
        
        Public Function IsXML_BinNull() As Boolean
            Return Me.IsNull(Me.tableProntuarios.XML_BinColumn)
        End Function
        
        Public Sub SetXML_BinNull()
            Me(Me.tableProntuarios.XML_BinColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProntuariosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ProntuariosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ProntuariosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ProntuariosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CEP_BAIDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnABREV_BAI As DataColumn
        
        Private columnCHAVE_BAI As DataColumn
        
        Private columnCHVLOC_BAI As DataColumn
        
        Private columnDATA_BAI As DataColumn
        
        Private columnEXTENSO_BAI As DataColumn
        
        Private columnOPER_BAI As DataColumn
        
        Private columnUF_BAI As DataColumn
        
        Friend Sub New()
            MyBase.New("CEP_BAI")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ABREV_BAIColumn As DataColumn
            Get
                Return Me.columnABREV_BAI
            End Get
        End Property
        
        Friend ReadOnly Property CHAVE_BAIColumn As DataColumn
            Get
                Return Me.columnCHAVE_BAI
            End Get
        End Property
        
        Friend ReadOnly Property CHVLOC_BAIColumn As DataColumn
            Get
                Return Me.columnCHVLOC_BAI
            End Get
        End Property
        
        Friend ReadOnly Property DATA_BAIColumn As DataColumn
            Get
                Return Me.columnDATA_BAI
            End Get
        End Property
        
        Friend ReadOnly Property EXTENSO_BAIColumn As DataColumn
            Get
                Return Me.columnEXTENSO_BAI
            End Get
        End Property
        
        Friend ReadOnly Property OPER_BAIColumn As DataColumn
            Get
                Return Me.columnOPER_BAI
            End Get
        End Property
        
        Friend ReadOnly Property UF_BAIColumn As DataColumn
            Get
                Return Me.columnUF_BAI
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CEP_BAIRow
            Get
                Return CType(Me.Rows(index),CEP_BAIRow)
            End Get
        End Property
        
        Public Event CEP_BAIRowChanged As CEP_BAIRowChangeEventHandler
        
        Public Event CEP_BAIRowChanging As CEP_BAIRowChangeEventHandler
        
        Public Event CEP_BAIRowDeleted As CEP_BAIRowChangeEventHandler
        
        Public Event CEP_BAIRowDeleting As CEP_BAIRowChangeEventHandler
        
        Public Overloads Sub AddCEP_BAIRow(ByVal row As CEP_BAIRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCEP_BAIRow(ByVal ABREV_BAI As String, ByVal CHAVE_BAI As String, ByVal CHVLOC_BAI As String, ByVal DATA_BAI As String, ByVal EXTENSO_BAI As String, ByVal OPER_BAI As String, ByVal UF_BAI As String) As CEP_BAIRow
            Dim rowCEP_BAIRow As CEP_BAIRow = CType(Me.NewRow,CEP_BAIRow)
            rowCEP_BAIRow.ItemArray = New Object() {ABREV_BAI, CHAVE_BAI, CHVLOC_BAI, DATA_BAI, EXTENSO_BAI, OPER_BAI, UF_BAI}
            Me.Rows.Add(rowCEP_BAIRow)
            Return rowCEP_BAIRow
        End Function
        
        Public Function FindByCHAVE_BAICHVLOC_BAI(ByVal CHAVE_BAI As String, ByVal CHVLOC_BAI As String) As CEP_BAIRow
            Return CType(Me.Rows.Find(New Object() {CHAVE_BAI, CHVLOC_BAI}),CEP_BAIRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CEP_BAIDataTable = CType(MyBase.Clone,CEP_BAIDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CEP_BAIDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnABREV_BAI = Me.Columns("ABREV_BAI")
            Me.columnCHAVE_BAI = Me.Columns("CHAVE_BAI")
            Me.columnCHVLOC_BAI = Me.Columns("CHVLOC_BAI")
            Me.columnDATA_BAI = Me.Columns("DATA_BAI")
            Me.columnEXTENSO_BAI = Me.Columns("EXTENSO_BAI")
            Me.columnOPER_BAI = Me.Columns("OPER_BAI")
            Me.columnUF_BAI = Me.Columns("UF_BAI")
        End Sub
        
        Private Sub InitClass()
            Me.columnABREV_BAI = New DataColumn("ABREV_BAI", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnABREV_BAI)
            Me.columnCHAVE_BAI = New DataColumn("CHAVE_BAI", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHAVE_BAI)
            Me.columnCHVLOC_BAI = New DataColumn("CHVLOC_BAI", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHVLOC_BAI)
            Me.columnDATA_BAI = New DataColumn("DATA_BAI", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDATA_BAI)
            Me.columnEXTENSO_BAI = New DataColumn("EXTENSO_BAI", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEXTENSO_BAI)
            Me.columnOPER_BAI = New DataColumn("OPER_BAI", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOPER_BAI)
            Me.columnUF_BAI = New DataColumn("UF_BAI", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUF_BAI)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCHAVE_BAI, Me.columnCHVLOC_BAI}, true))
            Me.columnCHAVE_BAI.AllowDBNull = false
            Me.columnCHVLOC_BAI.AllowDBNull = false
        End Sub
        
        Public Function NewCEP_BAIRow() As CEP_BAIRow
            Return CType(Me.NewRow,CEP_BAIRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CEP_BAIRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CEP_BAIRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CEP_BAIRowChangedEvent) Is Nothing) Then
                RaiseEvent CEP_BAIRowChanged(Me, New CEP_BAIRowChangeEvent(CType(e.Row,CEP_BAIRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CEP_BAIRowChangingEvent) Is Nothing) Then
                RaiseEvent CEP_BAIRowChanging(Me, New CEP_BAIRowChangeEvent(CType(e.Row,CEP_BAIRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CEP_BAIRowDeletedEvent) Is Nothing) Then
                RaiseEvent CEP_BAIRowDeleted(Me, New CEP_BAIRowChangeEvent(CType(e.Row,CEP_BAIRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CEP_BAIRowDeletingEvent) Is Nothing) Then
                RaiseEvent CEP_BAIRowDeleting(Me, New CEP_BAIRowChangeEvent(CType(e.Row,CEP_BAIRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCEP_BAIRow(ByVal row As CEP_BAIRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CEP_BAIRow
        Inherits DataRow
        
        Private tableCEP_BAI As CEP_BAIDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCEP_BAI = CType(Me.Table,CEP_BAIDataTable)
        End Sub
        
        Public Property ABREV_BAI As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_BAI.ABREV_BAIColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_BAI.ABREV_BAIColumn) = value
            End Set
        End Property
        
        Public Property CHAVE_BAI As String
            Get
                Return CType(Me(Me.tableCEP_BAI.CHAVE_BAIColumn),String)
            End Get
            Set
                Me(Me.tableCEP_BAI.CHAVE_BAIColumn) = value
            End Set
        End Property
        
        Public Property CHVLOC_BAI As String
            Get
                Return CType(Me(Me.tableCEP_BAI.CHVLOC_BAIColumn),String)
            End Get
            Set
                Me(Me.tableCEP_BAI.CHVLOC_BAIColumn) = value
            End Set
        End Property
        
        Public Property DATA_BAI As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_BAI.DATA_BAIColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_BAI.DATA_BAIColumn) = value
            End Set
        End Property
        
        Public Property EXTENSO_BAI As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_BAI.EXTENSO_BAIColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_BAI.EXTENSO_BAIColumn) = value
            End Set
        End Property
        
        Public Property OPER_BAI As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_BAI.OPER_BAIColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_BAI.OPER_BAIColumn) = value
            End Set
        End Property
        
        Public Property UF_BAI As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_BAI.UF_BAIColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_BAI.UF_BAIColumn) = value
            End Set
        End Property
        
        Public Function IsABREV_BAINull() As Boolean
            Return Me.IsNull(Me.tableCEP_BAI.ABREV_BAIColumn)
        End Function
        
        Public Sub SetABREV_BAINull()
            Me(Me.tableCEP_BAI.ABREV_BAIColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDATA_BAINull() As Boolean
            Return Me.IsNull(Me.tableCEP_BAI.DATA_BAIColumn)
        End Function
        
        Public Sub SetDATA_BAINull()
            Me(Me.tableCEP_BAI.DATA_BAIColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEXTENSO_BAINull() As Boolean
            Return Me.IsNull(Me.tableCEP_BAI.EXTENSO_BAIColumn)
        End Function
        
        Public Sub SetEXTENSO_BAINull()
            Me(Me.tableCEP_BAI.EXTENSO_BAIColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOPER_BAINull() As Boolean
            Return Me.IsNull(Me.tableCEP_BAI.OPER_BAIColumn)
        End Function
        
        Public Sub SetOPER_BAINull()
            Me(Me.tableCEP_BAI.OPER_BAIColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUF_BAINull() As Boolean
            Return Me.IsNull(Me.tableCEP_BAI.UF_BAIColumn)
        End Function
        
        Public Sub SetUF_BAINull()
            Me(Me.tableCEP_BAI.UF_BAIColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CEP_BAIRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CEP_BAIRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CEP_BAIRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CEP_BAIRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CEP_LOCDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCEP8_LOCAL As DataColumn
        
        Private columnCHAVE_LOCAL As DataColumn
        
        Private columnDATA_LOCAL As DataColumn
        
        Private columnDR_LOCAL As DataColumn
        
        Private columnNOME_LOCAL As DataColumn
        
        Private columnOPER_LOCAL As DataColumn
        
        Private columnREOP_LOCAL As DataColumn
        
        Private columnSIT_LOCAL As DataColumn
        
        Private columnSUBOR_LOCA As DataColumn
        
        Private columnTIPO_LOCAL As DataColumn
        
        Private columnUF_LOCAL As DataColumn
        
        Friend Sub New()
            MyBase.New("CEP_LOC")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CEP8_LOCALColumn As DataColumn
            Get
                Return Me.columnCEP8_LOCAL
            End Get
        End Property
        
        Friend ReadOnly Property CHAVE_LOCALColumn As DataColumn
            Get
                Return Me.columnCHAVE_LOCAL
            End Get
        End Property
        
        Friend ReadOnly Property DATA_LOCALColumn As DataColumn
            Get
                Return Me.columnDATA_LOCAL
            End Get
        End Property
        
        Friend ReadOnly Property DR_LOCALColumn As DataColumn
            Get
                Return Me.columnDR_LOCAL
            End Get
        End Property
        
        Friend ReadOnly Property NOME_LOCALColumn As DataColumn
            Get
                Return Me.columnNOME_LOCAL
            End Get
        End Property
        
        Friend ReadOnly Property OPER_LOCALColumn As DataColumn
            Get
                Return Me.columnOPER_LOCAL
            End Get
        End Property
        
        Friend ReadOnly Property REOP_LOCALColumn As DataColumn
            Get
                Return Me.columnREOP_LOCAL
            End Get
        End Property
        
        Friend ReadOnly Property SIT_LOCALColumn As DataColumn
            Get
                Return Me.columnSIT_LOCAL
            End Get
        End Property
        
        Friend ReadOnly Property SUBOR_LOCAColumn As DataColumn
            Get
                Return Me.columnSUBOR_LOCA
            End Get
        End Property
        
        Friend ReadOnly Property TIPO_LOCALColumn As DataColumn
            Get
                Return Me.columnTIPO_LOCAL
            End Get
        End Property
        
        Friend ReadOnly Property UF_LOCALColumn As DataColumn
            Get
                Return Me.columnUF_LOCAL
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CEP_LOCRow
            Get
                Return CType(Me.Rows(index),CEP_LOCRow)
            End Get
        End Property
        
        Public Event CEP_LOCRowChanged As CEP_LOCRowChangeEventHandler
        
        Public Event CEP_LOCRowChanging As CEP_LOCRowChangeEventHandler
        
        Public Event CEP_LOCRowDeleted As CEP_LOCRowChangeEventHandler
        
        Public Event CEP_LOCRowDeleting As CEP_LOCRowChangeEventHandler
        
        Public Overloads Sub AddCEP_LOCRow(ByVal row As CEP_LOCRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCEP_LOCRow(ByVal CEP8_LOCAL As String, ByVal CHAVE_LOCAL As String, ByVal DATA_LOCAL As String, ByVal DR_LOCAL As String, ByVal NOME_LOCAL As String, ByVal OPER_LOCAL As String, ByVal REOP_LOCAL As String, ByVal SIT_LOCAL As String, ByVal SUBOR_LOCA As String, ByVal TIPO_LOCAL As String, ByVal UF_LOCAL As String) As CEP_LOCRow
            Dim rowCEP_LOCRow As CEP_LOCRow = CType(Me.NewRow,CEP_LOCRow)
            rowCEP_LOCRow.ItemArray = New Object() {CEP8_LOCAL, CHAVE_LOCAL, DATA_LOCAL, DR_LOCAL, NOME_LOCAL, OPER_LOCAL, REOP_LOCAL, SIT_LOCAL, SUBOR_LOCA, TIPO_LOCAL, UF_LOCAL}
            Me.Rows.Add(rowCEP_LOCRow)
            Return rowCEP_LOCRow
        End Function
        
        Public Function FindByCHAVE_LOCAL(ByVal CHAVE_LOCAL As String) As CEP_LOCRow
            Return CType(Me.Rows.Find(New Object() {CHAVE_LOCAL}),CEP_LOCRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CEP_LOCDataTable = CType(MyBase.Clone,CEP_LOCDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CEP_LOCDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCEP8_LOCAL = Me.Columns("CEP8_LOCAL")
            Me.columnCHAVE_LOCAL = Me.Columns("CHAVE_LOCAL")
            Me.columnDATA_LOCAL = Me.Columns("DATA_LOCAL")
            Me.columnDR_LOCAL = Me.Columns("DR_LOCAL")
            Me.columnNOME_LOCAL = Me.Columns("NOME_LOCAL")
            Me.columnOPER_LOCAL = Me.Columns("OPER_LOCAL")
            Me.columnREOP_LOCAL = Me.Columns("REOP_LOCAL")
            Me.columnSIT_LOCAL = Me.Columns("SIT_LOCAL")
            Me.columnSUBOR_LOCA = Me.Columns("SUBOR_LOCA")
            Me.columnTIPO_LOCAL = Me.Columns("TIPO_LOCAL")
            Me.columnUF_LOCAL = Me.Columns("UF_LOCAL")
        End Sub
        
        Private Sub InitClass()
            Me.columnCEP8_LOCAL = New DataColumn("CEP8_LOCAL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCEP8_LOCAL)
            Me.columnCHAVE_LOCAL = New DataColumn("CHAVE_LOCAL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHAVE_LOCAL)
            Me.columnDATA_LOCAL = New DataColumn("DATA_LOCAL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDATA_LOCAL)
            Me.columnDR_LOCAL = New DataColumn("DR_LOCAL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDR_LOCAL)
            Me.columnNOME_LOCAL = New DataColumn("NOME_LOCAL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNOME_LOCAL)
            Me.columnOPER_LOCAL = New DataColumn("OPER_LOCAL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOPER_LOCAL)
            Me.columnREOP_LOCAL = New DataColumn("REOP_LOCAL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREOP_LOCAL)
            Me.columnSIT_LOCAL = New DataColumn("SIT_LOCAL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSIT_LOCAL)
            Me.columnSUBOR_LOCA = New DataColumn("SUBOR_LOCA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUBOR_LOCA)
            Me.columnTIPO_LOCAL = New DataColumn("TIPO_LOCAL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTIPO_LOCAL)
            Me.columnUF_LOCAL = New DataColumn("UF_LOCAL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUF_LOCAL)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCHAVE_LOCAL}, true))
            Me.columnCHAVE_LOCAL.AllowDBNull = false
            Me.columnCHAVE_LOCAL.Unique = true
        End Sub
        
        Public Function NewCEP_LOCRow() As CEP_LOCRow
            Return CType(Me.NewRow,CEP_LOCRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CEP_LOCRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CEP_LOCRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CEP_LOCRowChangedEvent) Is Nothing) Then
                RaiseEvent CEP_LOCRowChanged(Me, New CEP_LOCRowChangeEvent(CType(e.Row,CEP_LOCRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CEP_LOCRowChangingEvent) Is Nothing) Then
                RaiseEvent CEP_LOCRowChanging(Me, New CEP_LOCRowChangeEvent(CType(e.Row,CEP_LOCRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CEP_LOCRowDeletedEvent) Is Nothing) Then
                RaiseEvent CEP_LOCRowDeleted(Me, New CEP_LOCRowChangeEvent(CType(e.Row,CEP_LOCRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CEP_LOCRowDeletingEvent) Is Nothing) Then
                RaiseEvent CEP_LOCRowDeleting(Me, New CEP_LOCRowChangeEvent(CType(e.Row,CEP_LOCRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCEP_LOCRow(ByVal row As CEP_LOCRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CEP_LOCRow
        Inherits DataRow
        
        Private tableCEP_LOC As CEP_LOCDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCEP_LOC = CType(Me.Table,CEP_LOCDataTable)
        End Sub
        
        Public Property CEP8_LOCAL As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_LOC.CEP8_LOCALColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_LOC.CEP8_LOCALColumn) = value
            End Set
        End Property
        
        Public Property CHAVE_LOCAL As String
            Get
                Return CType(Me(Me.tableCEP_LOC.CHAVE_LOCALColumn),String)
            End Get
            Set
                Me(Me.tableCEP_LOC.CHAVE_LOCALColumn) = value
            End Set
        End Property
        
        Public Property DATA_LOCAL As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_LOC.DATA_LOCALColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_LOC.DATA_LOCALColumn) = value
            End Set
        End Property
        
        Public Property DR_LOCAL As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_LOC.DR_LOCALColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_LOC.DR_LOCALColumn) = value
            End Set
        End Property
        
        Public Property NOME_LOCAL As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_LOC.NOME_LOCALColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_LOC.NOME_LOCALColumn) = value
            End Set
        End Property
        
        Public Property OPER_LOCAL As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_LOC.OPER_LOCALColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_LOC.OPER_LOCALColumn) = value
            End Set
        End Property
        
        Public Property REOP_LOCAL As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_LOC.REOP_LOCALColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_LOC.REOP_LOCALColumn) = value
            End Set
        End Property
        
        Public Property SIT_LOCAL As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_LOC.SIT_LOCALColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_LOC.SIT_LOCALColumn) = value
            End Set
        End Property
        
        Public Property SUBOR_LOCA As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_LOC.SUBOR_LOCAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_LOC.SUBOR_LOCAColumn) = value
            End Set
        End Property
        
        Public Property TIPO_LOCAL As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_LOC.TIPO_LOCALColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_LOC.TIPO_LOCALColumn) = value
            End Set
        End Property
        
        Public Property UF_LOCAL As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_LOC.UF_LOCALColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_LOC.UF_LOCALColumn) = value
            End Set
        End Property
        
        Public Function IsCEP8_LOCALNull() As Boolean
            Return Me.IsNull(Me.tableCEP_LOC.CEP8_LOCALColumn)
        End Function
        
        Public Sub SetCEP8_LOCALNull()
            Me(Me.tableCEP_LOC.CEP8_LOCALColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDATA_LOCALNull() As Boolean
            Return Me.IsNull(Me.tableCEP_LOC.DATA_LOCALColumn)
        End Function
        
        Public Sub SetDATA_LOCALNull()
            Me(Me.tableCEP_LOC.DATA_LOCALColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDR_LOCALNull() As Boolean
            Return Me.IsNull(Me.tableCEP_LOC.DR_LOCALColumn)
        End Function
        
        Public Sub SetDR_LOCALNull()
            Me(Me.tableCEP_LOC.DR_LOCALColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNOME_LOCALNull() As Boolean
            Return Me.IsNull(Me.tableCEP_LOC.NOME_LOCALColumn)
        End Function
        
        Public Sub SetNOME_LOCALNull()
            Me(Me.tableCEP_LOC.NOME_LOCALColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOPER_LOCALNull() As Boolean
            Return Me.IsNull(Me.tableCEP_LOC.OPER_LOCALColumn)
        End Function
        
        Public Sub SetOPER_LOCALNull()
            Me(Me.tableCEP_LOC.OPER_LOCALColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREOP_LOCALNull() As Boolean
            Return Me.IsNull(Me.tableCEP_LOC.REOP_LOCALColumn)
        End Function
        
        Public Sub SetREOP_LOCALNull()
            Me(Me.tableCEP_LOC.REOP_LOCALColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSIT_LOCALNull() As Boolean
            Return Me.IsNull(Me.tableCEP_LOC.SIT_LOCALColumn)
        End Function
        
        Public Sub SetSIT_LOCALNull()
            Me(Me.tableCEP_LOC.SIT_LOCALColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSUBOR_LOCANull() As Boolean
            Return Me.IsNull(Me.tableCEP_LOC.SUBOR_LOCAColumn)
        End Function
        
        Public Sub SetSUBOR_LOCANull()
            Me(Me.tableCEP_LOC.SUBOR_LOCAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTIPO_LOCALNull() As Boolean
            Return Me.IsNull(Me.tableCEP_LOC.TIPO_LOCALColumn)
        End Function
        
        Public Sub SetTIPO_LOCALNull()
            Me(Me.tableCEP_LOC.TIPO_LOCALColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUF_LOCALNull() As Boolean
            Return Me.IsNull(Me.tableCEP_LOC.UF_LOCALColumn)
        End Function
        
        Public Sub SetUF_LOCALNull()
            Me(Me.tableCEP_LOC.UF_LOCALColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CEP_LOCRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CEP_LOCRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CEP_LOCRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CEP_LOCRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CEP_LOGDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCEP8_LOG As DataColumn
        
        Private columnCHAVE_LOG As DataColumn
        
        Private columnCHVBAI1_LOG As DataColumn
        
        Private columnCHVBAI2_LOG As DataColumn
        
        Private columnCHVLOCAL_LOG As DataColumn
        
        Private columnCHVTIPO_LOG As DataColumn
        
        Private columnCOMPLE_LOG As DataColumn
        
        Private columnDATA_LOG As DataColumn
        
        Private columnNOME_LOG As DataColumn
        
        Private columnOPER_LOG As DataColumn
        
        Private columnREOP_LOG As DataColumn
        
        Private columnUF_LOG As DataColumn
        
        Friend Sub New()
            MyBase.New("CEP_LOG")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CEP8_LOGColumn As DataColumn
            Get
                Return Me.columnCEP8_LOG
            End Get
        End Property
        
        Friend ReadOnly Property CHAVE_LOGColumn As DataColumn
            Get
                Return Me.columnCHAVE_LOG
            End Get
        End Property
        
        Friend ReadOnly Property CHVBAI1_LOGColumn As DataColumn
            Get
                Return Me.columnCHVBAI1_LOG
            End Get
        End Property
        
        Friend ReadOnly Property CHVBAI2_LOGColumn As DataColumn
            Get
                Return Me.columnCHVBAI2_LOG
            End Get
        End Property
        
        Friend ReadOnly Property CHVLOCAL_LOGColumn As DataColumn
            Get
                Return Me.columnCHVLOCAL_LOG
            End Get
        End Property
        
        Friend ReadOnly Property CHVTIPO_LOGColumn As DataColumn
            Get
                Return Me.columnCHVTIPO_LOG
            End Get
        End Property
        
        Friend ReadOnly Property COMPLE_LOGColumn As DataColumn
            Get
                Return Me.columnCOMPLE_LOG
            End Get
        End Property
        
        Friend ReadOnly Property DATA_LOGColumn As DataColumn
            Get
                Return Me.columnDATA_LOG
            End Get
        End Property
        
        Friend ReadOnly Property NOME_LOGColumn As DataColumn
            Get
                Return Me.columnNOME_LOG
            End Get
        End Property
        
        Friend ReadOnly Property OPER_LOGColumn As DataColumn
            Get
                Return Me.columnOPER_LOG
            End Get
        End Property
        
        Friend ReadOnly Property REOP_LOGColumn As DataColumn
            Get
                Return Me.columnREOP_LOG
            End Get
        End Property
        
        Friend ReadOnly Property UF_LOGColumn As DataColumn
            Get
                Return Me.columnUF_LOG
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CEP_LOGRow
            Get
                Return CType(Me.Rows(index),CEP_LOGRow)
            End Get
        End Property
        
        Public Event CEP_LOGRowChanged As CEP_LOGRowChangeEventHandler
        
        Public Event CEP_LOGRowChanging As CEP_LOGRowChangeEventHandler
        
        Public Event CEP_LOGRowDeleted As CEP_LOGRowChangeEventHandler
        
        Public Event CEP_LOGRowDeleting As CEP_LOGRowChangeEventHandler
        
        Public Overloads Sub AddCEP_LOGRow(ByVal row As CEP_LOGRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCEP_LOGRow(ByVal CEP8_LOG As String, ByVal CHAVE_LOG As String, ByVal CHVBAI1_LOG As String, ByVal CHVBAI2_LOG As String, ByVal CHVLOCAL_LOG As String, ByVal CHVTIPO_LOG As String, ByVal COMPLE_LOG As String, ByVal DATA_LOG As String, ByVal NOME_LOG As String, ByVal OPER_LOG As String, ByVal REOP_LOG As String, ByVal UF_LOG As String) As CEP_LOGRow
            Dim rowCEP_LOGRow As CEP_LOGRow = CType(Me.NewRow,CEP_LOGRow)
            rowCEP_LOGRow.ItemArray = New Object() {CEP8_LOG, CHAVE_LOG, CHVBAI1_LOG, CHVBAI2_LOG, CHVLOCAL_LOG, CHVTIPO_LOG, COMPLE_LOG, DATA_LOG, NOME_LOG, OPER_LOG, REOP_LOG, UF_LOG}
            Me.Rows.Add(rowCEP_LOGRow)
            Return rowCEP_LOGRow
        End Function
        
        Public Function FindByCHAVE_LOGCHVLOCAL_LOG(ByVal CHAVE_LOG As String, ByVal CHVLOCAL_LOG As String) As CEP_LOGRow
            Return CType(Me.Rows.Find(New Object() {CHAVE_LOG, CHVLOCAL_LOG}),CEP_LOGRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CEP_LOGDataTable = CType(MyBase.Clone,CEP_LOGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CEP_LOGDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCEP8_LOG = Me.Columns("CEP8_LOG")
            Me.columnCHAVE_LOG = Me.Columns("CHAVE_LOG")
            Me.columnCHVBAI1_LOG = Me.Columns("CHVBAI1_LOG")
            Me.columnCHVBAI2_LOG = Me.Columns("CHVBAI2_LOG")
            Me.columnCHVLOCAL_LOG = Me.Columns("CHVLOCAL_LOG")
            Me.columnCHVTIPO_LOG = Me.Columns("CHVTIPO_LOG")
            Me.columnCOMPLE_LOG = Me.Columns("COMPLE_LOG")
            Me.columnDATA_LOG = Me.Columns("DATA_LOG")
            Me.columnNOME_LOG = Me.Columns("NOME_LOG")
            Me.columnOPER_LOG = Me.Columns("OPER_LOG")
            Me.columnREOP_LOG = Me.Columns("REOP_LOG")
            Me.columnUF_LOG = Me.Columns("UF_LOG")
        End Sub
        
        Private Sub InitClass()
            Me.columnCEP8_LOG = New DataColumn("CEP8_LOG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCEP8_LOG)
            Me.columnCHAVE_LOG = New DataColumn("CHAVE_LOG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHAVE_LOG)
            Me.columnCHVBAI1_LOG = New DataColumn("CHVBAI1_LOG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHVBAI1_LOG)
            Me.columnCHVBAI2_LOG = New DataColumn("CHVBAI2_LOG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHVBAI2_LOG)
            Me.columnCHVLOCAL_LOG = New DataColumn("CHVLOCAL_LOG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHVLOCAL_LOG)
            Me.columnCHVTIPO_LOG = New DataColumn("CHVTIPO_LOG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHVTIPO_LOG)
            Me.columnCOMPLE_LOG = New DataColumn("COMPLE_LOG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOMPLE_LOG)
            Me.columnDATA_LOG = New DataColumn("DATA_LOG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDATA_LOG)
            Me.columnNOME_LOG = New DataColumn("NOME_LOG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNOME_LOG)
            Me.columnOPER_LOG = New DataColumn("OPER_LOG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOPER_LOG)
            Me.columnREOP_LOG = New DataColumn("REOP_LOG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREOP_LOG)
            Me.columnUF_LOG = New DataColumn("UF_LOG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUF_LOG)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCHAVE_LOG, Me.columnCHVLOCAL_LOG}, true))
            Me.columnCHAVE_LOG.AllowDBNull = false
            Me.columnCHVLOCAL_LOG.AllowDBNull = false
        End Sub
        
        Public Function NewCEP_LOGRow() As CEP_LOGRow
            Return CType(Me.NewRow,CEP_LOGRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CEP_LOGRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CEP_LOGRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CEP_LOGRowChangedEvent) Is Nothing) Then
                RaiseEvent CEP_LOGRowChanged(Me, New CEP_LOGRowChangeEvent(CType(e.Row,CEP_LOGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CEP_LOGRowChangingEvent) Is Nothing) Then
                RaiseEvent CEP_LOGRowChanging(Me, New CEP_LOGRowChangeEvent(CType(e.Row,CEP_LOGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CEP_LOGRowDeletedEvent) Is Nothing) Then
                RaiseEvent CEP_LOGRowDeleted(Me, New CEP_LOGRowChangeEvent(CType(e.Row,CEP_LOGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CEP_LOGRowDeletingEvent) Is Nothing) Then
                RaiseEvent CEP_LOGRowDeleting(Me, New CEP_LOGRowChangeEvent(CType(e.Row,CEP_LOGRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCEP_LOGRow(ByVal row As CEP_LOGRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CEP_LOGRow
        Inherits DataRow
        
        Private tableCEP_LOG As CEP_LOGDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCEP_LOG = CType(Me.Table,CEP_LOGDataTable)
        End Sub
        
        Public Property CEP8_LOG As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_LOG.CEP8_LOGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_LOG.CEP8_LOGColumn) = value
            End Set
        End Property
        
        Public Property CHAVE_LOG As String
            Get
                Return CType(Me(Me.tableCEP_LOG.CHAVE_LOGColumn),String)
            End Get
            Set
                Me(Me.tableCEP_LOG.CHAVE_LOGColumn) = value
            End Set
        End Property
        
        Public Property CHVBAI1_LOG As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_LOG.CHVBAI1_LOGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_LOG.CHVBAI1_LOGColumn) = value
            End Set
        End Property
        
        Public Property CHVBAI2_LOG As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_LOG.CHVBAI2_LOGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_LOG.CHVBAI2_LOGColumn) = value
            End Set
        End Property
        
        Public Property CHVLOCAL_LOG As String
            Get
                Return CType(Me(Me.tableCEP_LOG.CHVLOCAL_LOGColumn),String)
            End Get
            Set
                Me(Me.tableCEP_LOG.CHVLOCAL_LOGColumn) = value
            End Set
        End Property
        
        Public Property CHVTIPO_LOG As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_LOG.CHVTIPO_LOGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_LOG.CHVTIPO_LOGColumn) = value
            End Set
        End Property
        
        Public Property COMPLE_LOG As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_LOG.COMPLE_LOGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_LOG.COMPLE_LOGColumn) = value
            End Set
        End Property
        
        Public Property DATA_LOG As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_LOG.DATA_LOGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_LOG.DATA_LOGColumn) = value
            End Set
        End Property
        
        Public Property NOME_LOG As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_LOG.NOME_LOGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_LOG.NOME_LOGColumn) = value
            End Set
        End Property
        
        Public Property OPER_LOG As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_LOG.OPER_LOGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_LOG.OPER_LOGColumn) = value
            End Set
        End Property
        
        Public Property REOP_LOG As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_LOG.REOP_LOGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_LOG.REOP_LOGColumn) = value
            End Set
        End Property
        
        Public Property UF_LOG As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_LOG.UF_LOGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_LOG.UF_LOGColumn) = value
            End Set
        End Property
        
        Public Function IsCEP8_LOGNull() As Boolean
            Return Me.IsNull(Me.tableCEP_LOG.CEP8_LOGColumn)
        End Function
        
        Public Sub SetCEP8_LOGNull()
            Me(Me.tableCEP_LOG.CEP8_LOGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCHVBAI1_LOGNull() As Boolean
            Return Me.IsNull(Me.tableCEP_LOG.CHVBAI1_LOGColumn)
        End Function
        
        Public Sub SetCHVBAI1_LOGNull()
            Me(Me.tableCEP_LOG.CHVBAI1_LOGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCHVBAI2_LOGNull() As Boolean
            Return Me.IsNull(Me.tableCEP_LOG.CHVBAI2_LOGColumn)
        End Function
        
        Public Sub SetCHVBAI2_LOGNull()
            Me(Me.tableCEP_LOG.CHVBAI2_LOGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCHVTIPO_LOGNull() As Boolean
            Return Me.IsNull(Me.tableCEP_LOG.CHVTIPO_LOGColumn)
        End Function
        
        Public Sub SetCHVTIPO_LOGNull()
            Me(Me.tableCEP_LOG.CHVTIPO_LOGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCOMPLE_LOGNull() As Boolean
            Return Me.IsNull(Me.tableCEP_LOG.COMPLE_LOGColumn)
        End Function
        
        Public Sub SetCOMPLE_LOGNull()
            Me(Me.tableCEP_LOG.COMPLE_LOGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDATA_LOGNull() As Boolean
            Return Me.IsNull(Me.tableCEP_LOG.DATA_LOGColumn)
        End Function
        
        Public Sub SetDATA_LOGNull()
            Me(Me.tableCEP_LOG.DATA_LOGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNOME_LOGNull() As Boolean
            Return Me.IsNull(Me.tableCEP_LOG.NOME_LOGColumn)
        End Function
        
        Public Sub SetNOME_LOGNull()
            Me(Me.tableCEP_LOG.NOME_LOGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOPER_LOGNull() As Boolean
            Return Me.IsNull(Me.tableCEP_LOG.OPER_LOGColumn)
        End Function
        
        Public Sub SetOPER_LOGNull()
            Me(Me.tableCEP_LOG.OPER_LOGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREOP_LOGNull() As Boolean
            Return Me.IsNull(Me.tableCEP_LOG.REOP_LOGColumn)
        End Function
        
        Public Sub SetREOP_LOGNull()
            Me(Me.tableCEP_LOG.REOP_LOGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUF_LOGNull() As Boolean
            Return Me.IsNull(Me.tableCEP_LOG.UF_LOGColumn)
        End Function
        
        Public Sub SetUF_LOGNull()
            Me(Me.tableCEP_LOG.UF_LOGColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CEP_LOGRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CEP_LOGRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CEP_LOGRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CEP_LOGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CEP_UFSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCHAVE_UF As DataColumn
        
        Private columnNOME_UF As DataColumn
        
        Private columnSIGLA_UF As DataColumn
        
        Friend Sub New()
            MyBase.New("CEP_UFS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CHAVE_UFColumn As DataColumn
            Get
                Return Me.columnCHAVE_UF
            End Get
        End Property
        
        Friend ReadOnly Property NOME_UFColumn As DataColumn
            Get
                Return Me.columnNOME_UF
            End Get
        End Property
        
        Friend ReadOnly Property SIGLA_UFColumn As DataColumn
            Get
                Return Me.columnSIGLA_UF
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CEP_UFSRow
            Get
                Return CType(Me.Rows(index),CEP_UFSRow)
            End Get
        End Property
        
        Public Event CEP_UFSRowChanged As CEP_UFSRowChangeEventHandler
        
        Public Event CEP_UFSRowChanging As CEP_UFSRowChangeEventHandler
        
        Public Event CEP_UFSRowDeleted As CEP_UFSRowChangeEventHandler
        
        Public Event CEP_UFSRowDeleting As CEP_UFSRowChangeEventHandler
        
        Public Overloads Sub AddCEP_UFSRow(ByVal row As CEP_UFSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCEP_UFSRow(ByVal CHAVE_UF As String, ByVal NOME_UF As String, ByVal SIGLA_UF As String) As CEP_UFSRow
            Dim rowCEP_UFSRow As CEP_UFSRow = CType(Me.NewRow,CEP_UFSRow)
            rowCEP_UFSRow.ItemArray = New Object() {CHAVE_UF, NOME_UF, SIGLA_UF}
            Me.Rows.Add(rowCEP_UFSRow)
            Return rowCEP_UFSRow
        End Function
        
        Public Function FindBySIGLA_UF(ByVal SIGLA_UF As String) As CEP_UFSRow
            Return CType(Me.Rows.Find(New Object() {SIGLA_UF}),CEP_UFSRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CEP_UFSDataTable = CType(MyBase.Clone,CEP_UFSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CEP_UFSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCHAVE_UF = Me.Columns("CHAVE_UF")
            Me.columnNOME_UF = Me.Columns("NOME_UF")
            Me.columnSIGLA_UF = Me.Columns("SIGLA_UF")
        End Sub
        
        Private Sub InitClass()
            Me.columnCHAVE_UF = New DataColumn("CHAVE_UF", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHAVE_UF)
            Me.columnNOME_UF = New DataColumn("NOME_UF", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNOME_UF)
            Me.columnSIGLA_UF = New DataColumn("SIGLA_UF", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSIGLA_UF)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnSIGLA_UF}, true))
            Me.columnSIGLA_UF.AllowDBNull = false
            Me.columnSIGLA_UF.Unique = true
        End Sub
        
        Public Function NewCEP_UFSRow() As CEP_UFSRow
            Return CType(Me.NewRow,CEP_UFSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CEP_UFSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CEP_UFSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CEP_UFSRowChangedEvent) Is Nothing) Then
                RaiseEvent CEP_UFSRowChanged(Me, New CEP_UFSRowChangeEvent(CType(e.Row,CEP_UFSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CEP_UFSRowChangingEvent) Is Nothing) Then
                RaiseEvent CEP_UFSRowChanging(Me, New CEP_UFSRowChangeEvent(CType(e.Row,CEP_UFSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CEP_UFSRowDeletedEvent) Is Nothing) Then
                RaiseEvent CEP_UFSRowDeleted(Me, New CEP_UFSRowChangeEvent(CType(e.Row,CEP_UFSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CEP_UFSRowDeletingEvent) Is Nothing) Then
                RaiseEvent CEP_UFSRowDeleting(Me, New CEP_UFSRowChangeEvent(CType(e.Row,CEP_UFSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCEP_UFSRow(ByVal row As CEP_UFSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CEP_UFSRow
        Inherits DataRow
        
        Private tableCEP_UFS As CEP_UFSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCEP_UFS = CType(Me.Table,CEP_UFSDataTable)
        End Sub
        
        Public Property CHAVE_UF As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_UFS.CHAVE_UFColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_UFS.CHAVE_UFColumn) = value
            End Set
        End Property
        
        Public Property NOME_UF As String
            Get
                Try 
                    Return CType(Me(Me.tableCEP_UFS.NOME_UFColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCEP_UFS.NOME_UFColumn) = value
            End Set
        End Property
        
        Public Property SIGLA_UF As String
            Get
                Return CType(Me(Me.tableCEP_UFS.SIGLA_UFColumn),String)
            End Get
            Set
                Me(Me.tableCEP_UFS.SIGLA_UFColumn) = value
            End Set
        End Property
        
        Public Function IsCHAVE_UFNull() As Boolean
            Return Me.IsNull(Me.tableCEP_UFS.CHAVE_UFColumn)
        End Function
        
        Public Sub SetCHAVE_UFNull()
            Me(Me.tableCEP_UFS.CHAVE_UFColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNOME_UFNull() As Boolean
            Return Me.IsNull(Me.tableCEP_UFS.NOME_UFColumn)
        End Function
        
        Public Sub SetNOME_UFNull()
            Me(Me.tableCEP_UFS.NOME_UFColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CEP_UFSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CEP_UFSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CEP_UFSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CEP_UFSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CNAE_1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_final As DataColumn
        
        Private columncod_inicial As DataColumn
        
        Private columncodigo As DataColumn
        
        Private columnDESCRICAO As DataColumn
        
        Friend Sub New()
            MyBase.New("CNAE_1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_finalColumn As DataColumn
            Get
                Return Me.columncod_final
            End Get
        End Property
        
        Friend ReadOnly Property cod_inicialColumn As DataColumn
            Get
                Return Me.columncod_inicial
            End Get
        End Property
        
        Friend ReadOnly Property codigoColumn As DataColumn
            Get
                Return Me.columncodigo
            End Get
        End Property
        
        Friend ReadOnly Property DESCRICAOColumn As DataColumn
            Get
                Return Me.columnDESCRICAO
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CNAE_1Row
            Get
                Return CType(Me.Rows(index),CNAE_1Row)
            End Get
        End Property
        
        Public Event CNAE_1RowChanged As CNAE_1RowChangeEventHandler
        
        Public Event CNAE_1RowChanging As CNAE_1RowChangeEventHandler
        
        Public Event CNAE_1RowDeleted As CNAE_1RowChangeEventHandler
        
        Public Event CNAE_1RowDeleting As CNAE_1RowChangeEventHandler
        
        Public Overloads Sub AddCNAE_1Row(ByVal row As CNAE_1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCNAE_1Row(ByVal cod_final As String, ByVal cod_inicial As String, ByVal codigo As String, ByVal DESCRICAO As String) As CNAE_1Row
            Dim rowCNAE_1Row As CNAE_1Row = CType(Me.NewRow,CNAE_1Row)
            rowCNAE_1Row.ItemArray = New Object() {cod_final, cod_inicial, codigo, DESCRICAO}
            Me.Rows.Add(rowCNAE_1Row)
            Return rowCNAE_1Row
        End Function
        
        Public Function FindBycodigo(ByVal codigo As String) As CNAE_1Row
            Return CType(Me.Rows.Find(New Object() {codigo}),CNAE_1Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CNAE_1DataTable = CType(MyBase.Clone,CNAE_1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CNAE_1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_final = Me.Columns("cod_final")
            Me.columncod_inicial = Me.Columns("cod_inicial")
            Me.columncodigo = Me.Columns("codigo")
            Me.columnDESCRICAO = Me.Columns("DESCRICAO")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_final = New DataColumn("cod_final", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_final)
            Me.columncod_inicial = New DataColumn("cod_inicial", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_inicial)
            Me.columncodigo = New DataColumn("codigo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncodigo)
            Me.columnDESCRICAO = New DataColumn("DESCRICAO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRICAO)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncodigo}, true))
            Me.columncodigo.AllowDBNull = false
            Me.columncodigo.Unique = true
        End Sub
        
        Public Function NewCNAE_1Row() As CNAE_1Row
            Return CType(Me.NewRow,CNAE_1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CNAE_1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CNAE_1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CNAE_1RowChangedEvent) Is Nothing) Then
                RaiseEvent CNAE_1RowChanged(Me, New CNAE_1RowChangeEvent(CType(e.Row,CNAE_1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CNAE_1RowChangingEvent) Is Nothing) Then
                RaiseEvent CNAE_1RowChanging(Me, New CNAE_1RowChangeEvent(CType(e.Row,CNAE_1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CNAE_1RowDeletedEvent) Is Nothing) Then
                RaiseEvent CNAE_1RowDeleted(Me, New CNAE_1RowChangeEvent(CType(e.Row,CNAE_1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CNAE_1RowDeletingEvent) Is Nothing) Then
                RaiseEvent CNAE_1RowDeleting(Me, New CNAE_1RowChangeEvent(CType(e.Row,CNAE_1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCNAE_1Row(ByVal row As CNAE_1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CNAE_1Row
        Inherits DataRow
        
        Private tableCNAE_1 As CNAE_1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCNAE_1 = CType(Me.Table,CNAE_1DataTable)
        End Sub
        
        Public Property cod_final As String
            Get
                Try 
                    Return CType(Me(Me.tableCNAE_1.cod_finalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCNAE_1.cod_finalColumn) = value
            End Set
        End Property
        
        Public Property cod_inicial As String
            Get
                Try 
                    Return CType(Me(Me.tableCNAE_1.cod_inicialColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCNAE_1.cod_inicialColumn) = value
            End Set
        End Property
        
        Public Property codigo As String
            Get
                Return CType(Me(Me.tableCNAE_1.codigoColumn),String)
            End Get
            Set
                Me(Me.tableCNAE_1.codigoColumn) = value
            End Set
        End Property
        
        Public Property DESCRICAO As String
            Get
                Try 
                    Return CType(Me(Me.tableCNAE_1.DESCRICAOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCNAE_1.DESCRICAOColumn) = value
            End Set
        End Property
        
        Public Function Iscod_finalNull() As Boolean
            Return Me.IsNull(Me.tableCNAE_1.cod_finalColumn)
        End Function
        
        Public Sub Setcod_finalNull()
            Me(Me.tableCNAE_1.cod_finalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Iscod_inicialNull() As Boolean
            Return Me.IsNull(Me.tableCNAE_1.cod_inicialColumn)
        End Function
        
        Public Sub Setcod_inicialNull()
            Me(Me.tableCNAE_1.cod_inicialColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDESCRICAONull() As Boolean
            Return Me.IsNull(Me.tableCNAE_1.DESCRICAOColumn)
        End Function
        
        Public Sub SetDESCRICAONull()
            Me(Me.tableCNAE_1.DESCRICAOColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CNAE_1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CNAE_1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CNAE_1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CNAE_1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cnae_2DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncod_especie As DataColumn
        
        Private columnDESCRICAO_ESPECIE As DataColumn
        
        Friend Sub New()
            MyBase.New("cnae_2")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property cod_especieColumn As DataColumn
            Get
                Return Me.columncod_especie
            End Get
        End Property
        
        Friend ReadOnly Property DESCRICAO_ESPECIEColumn As DataColumn
            Get
                Return Me.columnDESCRICAO_ESPECIE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cnae_2Row
            Get
                Return CType(Me.Rows(index),cnae_2Row)
            End Get
        End Property
        
        Public Event cnae_2RowChanged As cnae_2RowChangeEventHandler
        
        Public Event cnae_2RowChanging As cnae_2RowChangeEventHandler
        
        Public Event cnae_2RowDeleted As cnae_2RowChangeEventHandler
        
        Public Event cnae_2RowDeleting As cnae_2RowChangeEventHandler
        
        Public Overloads Sub Addcnae_2Row(ByVal row As cnae_2Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addcnae_2Row(ByVal cod_especie As String, ByVal DESCRICAO_ESPECIE As String) As cnae_2Row
            Dim rowcnae_2Row As cnae_2Row = CType(Me.NewRow,cnae_2Row)
            rowcnae_2Row.ItemArray = New Object() {cod_especie, DESCRICAO_ESPECIE}
            Me.Rows.Add(rowcnae_2Row)
            Return rowcnae_2Row
        End Function
        
        Public Function FindBycod_especie(ByVal cod_especie As String) As cnae_2Row
            Return CType(Me.Rows.Find(New Object() {cod_especie}),cnae_2Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cnae_2DataTable = CType(MyBase.Clone,cnae_2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cnae_2DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncod_especie = Me.Columns("cod_especie")
            Me.columnDESCRICAO_ESPECIE = Me.Columns("DESCRICAO_ESPECIE")
        End Sub
        
        Private Sub InitClass()
            Me.columncod_especie = New DataColumn("cod_especie", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncod_especie)
            Me.columnDESCRICAO_ESPECIE = New DataColumn("DESCRICAO_ESPECIE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRICAO_ESPECIE)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columncod_especie}, true))
            Me.columncod_especie.AllowDBNull = false
            Me.columncod_especie.Unique = true
        End Sub
        
        Public Function Newcnae_2Row() As cnae_2Row
            Return CType(Me.NewRow,cnae_2Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cnae_2Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cnae_2Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cnae_2RowChangedEvent) Is Nothing) Then
                RaiseEvent cnae_2RowChanged(Me, New cnae_2RowChangeEvent(CType(e.Row,cnae_2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cnae_2RowChangingEvent) Is Nothing) Then
                RaiseEvent cnae_2RowChanging(Me, New cnae_2RowChangeEvent(CType(e.Row,cnae_2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cnae_2RowDeletedEvent) Is Nothing) Then
                RaiseEvent cnae_2RowDeleted(Me, New cnae_2RowChangeEvent(CType(e.Row,cnae_2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cnae_2RowDeletingEvent) Is Nothing) Then
                RaiseEvent cnae_2RowDeleting(Me, New cnae_2RowChangeEvent(CType(e.Row,cnae_2Row), e.Action))
            End If
        End Sub
        
        Public Sub Removecnae_2Row(ByVal row As cnae_2Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cnae_2Row
        Inherits DataRow
        
        Private tablecnae_2 As cnae_2DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecnae_2 = CType(Me.Table,cnae_2DataTable)
        End Sub
        
        Public Property cod_especie As String
            Get
                Return CType(Me(Me.tablecnae_2.cod_especieColumn),String)
            End Get
            Set
                Me(Me.tablecnae_2.cod_especieColumn) = value
            End Set
        End Property
        
        Public Property DESCRICAO_ESPECIE As String
            Get
                Try 
                    Return CType(Me(Me.tablecnae_2.DESCRICAO_ESPECIEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecnae_2.DESCRICAO_ESPECIEColumn) = value
            End Set
        End Property
        
        Public Function IsDESCRICAO_ESPECIENull() As Boolean
            Return Me.IsNull(Me.tablecnae_2.DESCRICAO_ESPECIEColumn)
        End Function
        
        Public Sub SetDESCRICAO_ESPECIENull()
            Me(Me.tablecnae_2.DESCRICAO_ESPECIEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cnae_2RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cnae_2Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cnae_2Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cnae_2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CNAE_FINALDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCLASSE_FSC As DataColumn
        
        Private columnCODIGO_FSC As DataColumn
        
        Private columnDESCRICAO_FSC As DataColumn
        
        Private columnDV_FSC As DataColumn
        
        Friend Sub New()
            MyBase.New("CNAE_FINAL")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CLASSE_FSCColumn As DataColumn
            Get
                Return Me.columnCLASSE_FSC
            End Get
        End Property
        
        Friend ReadOnly Property CODIGO_FSCColumn As DataColumn
            Get
                Return Me.columnCODIGO_FSC
            End Get
        End Property
        
        Friend ReadOnly Property DESCRICAO_FSCColumn As DataColumn
            Get
                Return Me.columnDESCRICAO_FSC
            End Get
        End Property
        
        Friend ReadOnly Property DV_FSCColumn As DataColumn
            Get
                Return Me.columnDV_FSC
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CNAE_FINALRow
            Get
                Return CType(Me.Rows(index),CNAE_FINALRow)
            End Get
        End Property
        
        Public Event CNAE_FINALRowChanged As CNAE_FINALRowChangeEventHandler
        
        Public Event CNAE_FINALRowChanging As CNAE_FINALRowChangeEventHandler
        
        Public Event CNAE_FINALRowDeleted As CNAE_FINALRowChangeEventHandler
        
        Public Event CNAE_FINALRowDeleting As CNAE_FINALRowChangeEventHandler
        
        Public Overloads Sub AddCNAE_FINALRow(ByVal row As CNAE_FINALRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCNAE_FINALRow(ByVal CLASSE_FSC As String, ByVal CODIGO_FSC As String, ByVal DESCRICAO_FSC As String, ByVal DV_FSC As String) As CNAE_FINALRow
            Dim rowCNAE_FINALRow As CNAE_FINALRow = CType(Me.NewRow,CNAE_FINALRow)
            rowCNAE_FINALRow.ItemArray = New Object() {CLASSE_FSC, CODIGO_FSC, DESCRICAO_FSC, DV_FSC}
            Me.Rows.Add(rowCNAE_FINALRow)
            Return rowCNAE_FINALRow
        End Function
        
        Public Function FindByCLASSE_FSCCODIGO_FSC(ByVal CLASSE_FSC As String, ByVal CODIGO_FSC As String) As CNAE_FINALRow
            Return CType(Me.Rows.Find(New Object() {CLASSE_FSC, CODIGO_FSC}),CNAE_FINALRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CNAE_FINALDataTable = CType(MyBase.Clone,CNAE_FINALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CNAE_FINALDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCLASSE_FSC = Me.Columns("CLASSE_FSC")
            Me.columnCODIGO_FSC = Me.Columns("CODIGO_FSC")
            Me.columnDESCRICAO_FSC = Me.Columns("DESCRICAO_FSC")
            Me.columnDV_FSC = Me.Columns("DV_FSC")
        End Sub
        
        Private Sub InitClass()
            Me.columnCLASSE_FSC = New DataColumn("CLASSE_FSC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCLASSE_FSC)
            Me.columnCODIGO_FSC = New DataColumn("CODIGO_FSC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCODIGO_FSC)
            Me.columnDESCRICAO_FSC = New DataColumn("DESCRICAO_FSC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRICAO_FSC)
            Me.columnDV_FSC = New DataColumn("DV_FSC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDV_FSC)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCLASSE_FSC, Me.columnCODIGO_FSC}, true))
            Me.columnCLASSE_FSC.AllowDBNull = false
            Me.columnCODIGO_FSC.AllowDBNull = false
        End Sub
        
        Public Function NewCNAE_FINALRow() As CNAE_FINALRow
            Return CType(Me.NewRow,CNAE_FINALRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CNAE_FINALRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CNAE_FINALRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CNAE_FINALRowChangedEvent) Is Nothing) Then
                RaiseEvent CNAE_FINALRowChanged(Me, New CNAE_FINALRowChangeEvent(CType(e.Row,CNAE_FINALRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CNAE_FINALRowChangingEvent) Is Nothing) Then
                RaiseEvent CNAE_FINALRowChanging(Me, New CNAE_FINALRowChangeEvent(CType(e.Row,CNAE_FINALRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CNAE_FINALRowDeletedEvent) Is Nothing) Then
                RaiseEvent CNAE_FINALRowDeleted(Me, New CNAE_FINALRowChangeEvent(CType(e.Row,CNAE_FINALRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CNAE_FINALRowDeletingEvent) Is Nothing) Then
                RaiseEvent CNAE_FINALRowDeleting(Me, New CNAE_FINALRowChangeEvent(CType(e.Row,CNAE_FINALRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCNAE_FINALRow(ByVal row As CNAE_FINALRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CNAE_FINALRow
        Inherits DataRow
        
        Private tableCNAE_FINAL As CNAE_FINALDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCNAE_FINAL = CType(Me.Table,CNAE_FINALDataTable)
        End Sub
        
        Public Property CLASSE_FSC As String
            Get
                Return CType(Me(Me.tableCNAE_FINAL.CLASSE_FSCColumn),String)
            End Get
            Set
                Me(Me.tableCNAE_FINAL.CLASSE_FSCColumn) = value
            End Set
        End Property
        
        Public Property CODIGO_FSC As String
            Get
                Return CType(Me(Me.tableCNAE_FINAL.CODIGO_FSCColumn),String)
            End Get
            Set
                Me(Me.tableCNAE_FINAL.CODIGO_FSCColumn) = value
            End Set
        End Property
        
        Public Property DESCRICAO_FSC As String
            Get
                Try 
                    Return CType(Me(Me.tableCNAE_FINAL.DESCRICAO_FSCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCNAE_FINAL.DESCRICAO_FSCColumn) = value
            End Set
        End Property
        
        Public Property DV_FSC As String
            Get
                Try 
                    Return CType(Me(Me.tableCNAE_FINAL.DV_FSCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCNAE_FINAL.DV_FSCColumn) = value
            End Set
        End Property
        
        Public Function IsDESCRICAO_FSCNull() As Boolean
            Return Me.IsNull(Me.tableCNAE_FINAL.DESCRICAO_FSCColumn)
        End Function
        
        Public Sub SetDESCRICAO_FSCNull()
            Me(Me.tableCNAE_FINAL.DESCRICAO_FSCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDV_FSCNull() As Boolean
            Return Me.IsNull(Me.tableCNAE_FINAL.DV_FSCColumn)
        End Function
        
        Public Sub SetDV_FSCNull()
            Me(Me.tableCNAE_FINAL.DV_FSCColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CNAE_FINALRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CNAE_FINALRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CNAE_FINALRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CNAE_FINALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CBO_Grande_GrupoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCD_CBO As DataColumn
        
        Private columnDS_TITULO As DataColumn
        
        Friend Sub New()
            MyBase.New("CBO_Grande_Grupo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CD_CBOColumn As DataColumn
            Get
                Return Me.columnCD_CBO
            End Get
        End Property
        
        Friend ReadOnly Property DS_TITULOColumn As DataColumn
            Get
                Return Me.columnDS_TITULO
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CBO_Grande_GrupoRow
            Get
                Return CType(Me.Rows(index),CBO_Grande_GrupoRow)
            End Get
        End Property
        
        Public Event CBO_Grande_GrupoRowChanged As CBO_Grande_GrupoRowChangeEventHandler
        
        Public Event CBO_Grande_GrupoRowChanging As CBO_Grande_GrupoRowChangeEventHandler
        
        Public Event CBO_Grande_GrupoRowDeleted As CBO_Grande_GrupoRowChangeEventHandler
        
        Public Event CBO_Grande_GrupoRowDeleting As CBO_Grande_GrupoRowChangeEventHandler
        
        Public Overloads Sub AddCBO_Grande_GrupoRow(ByVal row As CBO_Grande_GrupoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCBO_Grande_GrupoRow(ByVal CD_CBO As String, ByVal DS_TITULO As String) As CBO_Grande_GrupoRow
            Dim rowCBO_Grande_GrupoRow As CBO_Grande_GrupoRow = CType(Me.NewRow,CBO_Grande_GrupoRow)
            rowCBO_Grande_GrupoRow.ItemArray = New Object() {CD_CBO, DS_TITULO}
            Me.Rows.Add(rowCBO_Grande_GrupoRow)
            Return rowCBO_Grande_GrupoRow
        End Function
        
        Public Function FindByCD_CBO(ByVal CD_CBO As String) As CBO_Grande_GrupoRow
            Return CType(Me.Rows.Find(New Object() {CD_CBO}),CBO_Grande_GrupoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CBO_Grande_GrupoDataTable = CType(MyBase.Clone,CBO_Grande_GrupoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CBO_Grande_GrupoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCD_CBO = Me.Columns("CD_CBO")
            Me.columnDS_TITULO = Me.Columns("DS_TITULO")
        End Sub
        
        Private Sub InitClass()
            Me.columnCD_CBO = New DataColumn("CD_CBO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCD_CBO)
            Me.columnDS_TITULO = New DataColumn("DS_TITULO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDS_TITULO)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCD_CBO}, true))
            Me.columnCD_CBO.AllowDBNull = false
            Me.columnCD_CBO.Unique = true
        End Sub
        
        Public Function NewCBO_Grande_GrupoRow() As CBO_Grande_GrupoRow
            Return CType(Me.NewRow,CBO_Grande_GrupoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CBO_Grande_GrupoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CBO_Grande_GrupoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CBO_Grande_GrupoRowChangedEvent) Is Nothing) Then
                RaiseEvent CBO_Grande_GrupoRowChanged(Me, New CBO_Grande_GrupoRowChangeEvent(CType(e.Row,CBO_Grande_GrupoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CBO_Grande_GrupoRowChangingEvent) Is Nothing) Then
                RaiseEvent CBO_Grande_GrupoRowChanging(Me, New CBO_Grande_GrupoRowChangeEvent(CType(e.Row,CBO_Grande_GrupoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CBO_Grande_GrupoRowDeletedEvent) Is Nothing) Then
                RaiseEvent CBO_Grande_GrupoRowDeleted(Me, New CBO_Grande_GrupoRowChangeEvent(CType(e.Row,CBO_Grande_GrupoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CBO_Grande_GrupoRowDeletingEvent) Is Nothing) Then
                RaiseEvent CBO_Grande_GrupoRowDeleting(Me, New CBO_Grande_GrupoRowChangeEvent(CType(e.Row,CBO_Grande_GrupoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCBO_Grande_GrupoRow(ByVal row As CBO_Grande_GrupoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CBO_Grande_GrupoRow
        Inherits DataRow
        
        Private tableCBO_Grande_Grupo As CBO_Grande_GrupoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCBO_Grande_Grupo = CType(Me.Table,CBO_Grande_GrupoDataTable)
        End Sub
        
        Public Property CD_CBO As String
            Get
                Return CType(Me(Me.tableCBO_Grande_Grupo.CD_CBOColumn),String)
            End Get
            Set
                Me(Me.tableCBO_Grande_Grupo.CD_CBOColumn) = value
            End Set
        End Property
        
        Public Property DS_TITULO As String
            Get
                Try 
                    Return CType(Me(Me.tableCBO_Grande_Grupo.DS_TITULOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCBO_Grande_Grupo.DS_TITULOColumn) = value
            End Set
        End Property
        
        Public Function IsDS_TITULONull() As Boolean
            Return Me.IsNull(Me.tableCBO_Grande_Grupo.DS_TITULOColumn)
        End Function
        
        Public Sub SetDS_TITULONull()
            Me(Me.tableCBO_Grande_Grupo.DS_TITULOColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CBO_Grande_GrupoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CBO_Grande_GrupoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CBO_Grande_GrupoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CBO_Grande_GrupoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CBO_Grupo_BaseDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCD_CBO As DataColumn
        
        Private columnDS_TITULO As DataColumn
        
        Friend Sub New()
            MyBase.New("CBO_Grupo_Base")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CD_CBOColumn As DataColumn
            Get
                Return Me.columnCD_CBO
            End Get
        End Property
        
        Friend ReadOnly Property DS_TITULOColumn As DataColumn
            Get
                Return Me.columnDS_TITULO
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CBO_Grupo_BaseRow
            Get
                Return CType(Me.Rows(index),CBO_Grupo_BaseRow)
            End Get
        End Property
        
        Public Event CBO_Grupo_BaseRowChanged As CBO_Grupo_BaseRowChangeEventHandler
        
        Public Event CBO_Grupo_BaseRowChanging As CBO_Grupo_BaseRowChangeEventHandler
        
        Public Event CBO_Grupo_BaseRowDeleted As CBO_Grupo_BaseRowChangeEventHandler
        
        Public Event CBO_Grupo_BaseRowDeleting As CBO_Grupo_BaseRowChangeEventHandler
        
        Public Overloads Sub AddCBO_Grupo_BaseRow(ByVal row As CBO_Grupo_BaseRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCBO_Grupo_BaseRow(ByVal CD_CBO As String, ByVal DS_TITULO As String) As CBO_Grupo_BaseRow
            Dim rowCBO_Grupo_BaseRow As CBO_Grupo_BaseRow = CType(Me.NewRow,CBO_Grupo_BaseRow)
            rowCBO_Grupo_BaseRow.ItemArray = New Object() {CD_CBO, DS_TITULO}
            Me.Rows.Add(rowCBO_Grupo_BaseRow)
            Return rowCBO_Grupo_BaseRow
        End Function
        
        Public Function FindByCD_CBO(ByVal CD_CBO As String) As CBO_Grupo_BaseRow
            Return CType(Me.Rows.Find(New Object() {CD_CBO}),CBO_Grupo_BaseRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CBO_Grupo_BaseDataTable = CType(MyBase.Clone,CBO_Grupo_BaseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CBO_Grupo_BaseDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCD_CBO = Me.Columns("CD_CBO")
            Me.columnDS_TITULO = Me.Columns("DS_TITULO")
        End Sub
        
        Private Sub InitClass()
            Me.columnCD_CBO = New DataColumn("CD_CBO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCD_CBO)
            Me.columnDS_TITULO = New DataColumn("DS_TITULO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDS_TITULO)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCD_CBO}, true))
            Me.columnCD_CBO.AllowDBNull = false
            Me.columnCD_CBO.Unique = true
        End Sub
        
        Public Function NewCBO_Grupo_BaseRow() As CBO_Grupo_BaseRow
            Return CType(Me.NewRow,CBO_Grupo_BaseRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CBO_Grupo_BaseRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CBO_Grupo_BaseRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CBO_Grupo_BaseRowChangedEvent) Is Nothing) Then
                RaiseEvent CBO_Grupo_BaseRowChanged(Me, New CBO_Grupo_BaseRowChangeEvent(CType(e.Row,CBO_Grupo_BaseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CBO_Grupo_BaseRowChangingEvent) Is Nothing) Then
                RaiseEvent CBO_Grupo_BaseRowChanging(Me, New CBO_Grupo_BaseRowChangeEvent(CType(e.Row,CBO_Grupo_BaseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CBO_Grupo_BaseRowDeletedEvent) Is Nothing) Then
                RaiseEvent CBO_Grupo_BaseRowDeleted(Me, New CBO_Grupo_BaseRowChangeEvent(CType(e.Row,CBO_Grupo_BaseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CBO_Grupo_BaseRowDeletingEvent) Is Nothing) Then
                RaiseEvent CBO_Grupo_BaseRowDeleting(Me, New CBO_Grupo_BaseRowChangeEvent(CType(e.Row,CBO_Grupo_BaseRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCBO_Grupo_BaseRow(ByVal row As CBO_Grupo_BaseRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CBO_Grupo_BaseRow
        Inherits DataRow
        
        Private tableCBO_Grupo_Base As CBO_Grupo_BaseDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCBO_Grupo_Base = CType(Me.Table,CBO_Grupo_BaseDataTable)
        End Sub
        
        Public Property CD_CBO As String
            Get
                Return CType(Me(Me.tableCBO_Grupo_Base.CD_CBOColumn),String)
            End Get
            Set
                Me(Me.tableCBO_Grupo_Base.CD_CBOColumn) = value
            End Set
        End Property
        
        Public Property DS_TITULO As String
            Get
                Try 
                    Return CType(Me(Me.tableCBO_Grupo_Base.DS_TITULOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCBO_Grupo_Base.DS_TITULOColumn) = value
            End Set
        End Property
        
        Public Function IsDS_TITULONull() As Boolean
            Return Me.IsNull(Me.tableCBO_Grupo_Base.DS_TITULOColumn)
        End Function
        
        Public Sub SetDS_TITULONull()
            Me(Me.tableCBO_Grupo_Base.DS_TITULOColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CBO_Grupo_BaseRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CBO_Grupo_BaseRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CBO_Grupo_BaseRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CBO_Grupo_BaseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CBO_Grupo_FinalDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCD_CBO As DataColumn
        
        Private columnDS_TITULO As DataColumn
        
        Friend Sub New()
            MyBase.New("CBO_Grupo_Final")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CD_CBOColumn As DataColumn
            Get
                Return Me.columnCD_CBO
            End Get
        End Property
        
        Friend ReadOnly Property DS_TITULOColumn As DataColumn
            Get
                Return Me.columnDS_TITULO
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CBO_Grupo_FinalRow
            Get
                Return CType(Me.Rows(index),CBO_Grupo_FinalRow)
            End Get
        End Property
        
        Public Event CBO_Grupo_FinalRowChanged As CBO_Grupo_FinalRowChangeEventHandler
        
        Public Event CBO_Grupo_FinalRowChanging As CBO_Grupo_FinalRowChangeEventHandler
        
        Public Event CBO_Grupo_FinalRowDeleted As CBO_Grupo_FinalRowChangeEventHandler
        
        Public Event CBO_Grupo_FinalRowDeleting As CBO_Grupo_FinalRowChangeEventHandler
        
        Public Overloads Sub AddCBO_Grupo_FinalRow(ByVal row As CBO_Grupo_FinalRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCBO_Grupo_FinalRow(ByVal CD_CBO As String, ByVal DS_TITULO As String) As CBO_Grupo_FinalRow
            Dim rowCBO_Grupo_FinalRow As CBO_Grupo_FinalRow = CType(Me.NewRow,CBO_Grupo_FinalRow)
            rowCBO_Grupo_FinalRow.ItemArray = New Object() {CD_CBO, DS_TITULO}
            Me.Rows.Add(rowCBO_Grupo_FinalRow)
            Return rowCBO_Grupo_FinalRow
        End Function
        
        Public Function FindByCD_CBO(ByVal CD_CBO As String) As CBO_Grupo_FinalRow
            Return CType(Me.Rows.Find(New Object() {CD_CBO}),CBO_Grupo_FinalRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CBO_Grupo_FinalDataTable = CType(MyBase.Clone,CBO_Grupo_FinalDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CBO_Grupo_FinalDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCD_CBO = Me.Columns("CD_CBO")
            Me.columnDS_TITULO = Me.Columns("DS_TITULO")
        End Sub
        
        Private Sub InitClass()
            Me.columnCD_CBO = New DataColumn("CD_CBO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCD_CBO)
            Me.columnDS_TITULO = New DataColumn("DS_TITULO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDS_TITULO)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCD_CBO}, true))
            Me.columnCD_CBO.AllowDBNull = false
            Me.columnCD_CBO.Unique = true
        End Sub
        
        Public Function NewCBO_Grupo_FinalRow() As CBO_Grupo_FinalRow
            Return CType(Me.NewRow,CBO_Grupo_FinalRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CBO_Grupo_FinalRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CBO_Grupo_FinalRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CBO_Grupo_FinalRowChangedEvent) Is Nothing) Then
                RaiseEvent CBO_Grupo_FinalRowChanged(Me, New CBO_Grupo_FinalRowChangeEvent(CType(e.Row,CBO_Grupo_FinalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CBO_Grupo_FinalRowChangingEvent) Is Nothing) Then
                RaiseEvent CBO_Grupo_FinalRowChanging(Me, New CBO_Grupo_FinalRowChangeEvent(CType(e.Row,CBO_Grupo_FinalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CBO_Grupo_FinalRowDeletedEvent) Is Nothing) Then
                RaiseEvent CBO_Grupo_FinalRowDeleted(Me, New CBO_Grupo_FinalRowChangeEvent(CType(e.Row,CBO_Grupo_FinalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CBO_Grupo_FinalRowDeletingEvent) Is Nothing) Then
                RaiseEvent CBO_Grupo_FinalRowDeleting(Me, New CBO_Grupo_FinalRowChangeEvent(CType(e.Row,CBO_Grupo_FinalRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCBO_Grupo_FinalRow(ByVal row As CBO_Grupo_FinalRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CBO_Grupo_FinalRow
        Inherits DataRow
        
        Private tableCBO_Grupo_Final As CBO_Grupo_FinalDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCBO_Grupo_Final = CType(Me.Table,CBO_Grupo_FinalDataTable)
        End Sub
        
        Public Property CD_CBO As String
            Get
                Return CType(Me(Me.tableCBO_Grupo_Final.CD_CBOColumn),String)
            End Get
            Set
                Me(Me.tableCBO_Grupo_Final.CD_CBOColumn) = value
            End Set
        End Property
        
        Public Property DS_TITULO As String
            Get
                Try 
                    Return CType(Me(Me.tableCBO_Grupo_Final.DS_TITULOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCBO_Grupo_Final.DS_TITULOColumn) = value
            End Set
        End Property
        
        Public Function IsDS_TITULONull() As Boolean
            Return Me.IsNull(Me.tableCBO_Grupo_Final.DS_TITULOColumn)
        End Function
        
        Public Sub SetDS_TITULONull()
            Me(Me.tableCBO_Grupo_Final.DS_TITULOColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CBO_Grupo_FinalRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CBO_Grupo_FinalRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CBO_Grupo_FinalRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CBO_Grupo_FinalRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CBO_SubGrupoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCD_CBO As DataColumn
        
        Private columnDS_TITULO As DataColumn
        
        Friend Sub New()
            MyBase.New("CBO_SubGrupo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CD_CBOColumn As DataColumn
            Get
                Return Me.columnCD_CBO
            End Get
        End Property
        
        Friend ReadOnly Property DS_TITULOColumn As DataColumn
            Get
                Return Me.columnDS_TITULO
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CBO_SubGrupoRow
            Get
                Return CType(Me.Rows(index),CBO_SubGrupoRow)
            End Get
        End Property
        
        Public Event CBO_SubGrupoRowChanged As CBO_SubGrupoRowChangeEventHandler
        
        Public Event CBO_SubGrupoRowChanging As CBO_SubGrupoRowChangeEventHandler
        
        Public Event CBO_SubGrupoRowDeleted As CBO_SubGrupoRowChangeEventHandler
        
        Public Event CBO_SubGrupoRowDeleting As CBO_SubGrupoRowChangeEventHandler
        
        Public Overloads Sub AddCBO_SubGrupoRow(ByVal row As CBO_SubGrupoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCBO_SubGrupoRow(ByVal CD_CBO As String, ByVal DS_TITULO As String) As CBO_SubGrupoRow
            Dim rowCBO_SubGrupoRow As CBO_SubGrupoRow = CType(Me.NewRow,CBO_SubGrupoRow)
            rowCBO_SubGrupoRow.ItemArray = New Object() {CD_CBO, DS_TITULO}
            Me.Rows.Add(rowCBO_SubGrupoRow)
            Return rowCBO_SubGrupoRow
        End Function
        
        Public Function FindByCD_CBO(ByVal CD_CBO As String) As CBO_SubGrupoRow
            Return CType(Me.Rows.Find(New Object() {CD_CBO}),CBO_SubGrupoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CBO_SubGrupoDataTable = CType(MyBase.Clone,CBO_SubGrupoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CBO_SubGrupoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCD_CBO = Me.Columns("CD_CBO")
            Me.columnDS_TITULO = Me.Columns("DS_TITULO")
        End Sub
        
        Private Sub InitClass()
            Me.columnCD_CBO = New DataColumn("CD_CBO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCD_CBO)
            Me.columnDS_TITULO = New DataColumn("DS_TITULO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDS_TITULO)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCD_CBO}, true))
            Me.columnCD_CBO.AllowDBNull = false
            Me.columnCD_CBO.Unique = true
        End Sub
        
        Public Function NewCBO_SubGrupoRow() As CBO_SubGrupoRow
            Return CType(Me.NewRow,CBO_SubGrupoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CBO_SubGrupoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CBO_SubGrupoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CBO_SubGrupoRowChangedEvent) Is Nothing) Then
                RaiseEvent CBO_SubGrupoRowChanged(Me, New CBO_SubGrupoRowChangeEvent(CType(e.Row,CBO_SubGrupoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CBO_SubGrupoRowChangingEvent) Is Nothing) Then
                RaiseEvent CBO_SubGrupoRowChanging(Me, New CBO_SubGrupoRowChangeEvent(CType(e.Row,CBO_SubGrupoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CBO_SubGrupoRowDeletedEvent) Is Nothing) Then
                RaiseEvent CBO_SubGrupoRowDeleted(Me, New CBO_SubGrupoRowChangeEvent(CType(e.Row,CBO_SubGrupoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CBO_SubGrupoRowDeletingEvent) Is Nothing) Then
                RaiseEvent CBO_SubGrupoRowDeleting(Me, New CBO_SubGrupoRowChangeEvent(CType(e.Row,CBO_SubGrupoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCBO_SubGrupoRow(ByVal row As CBO_SubGrupoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CBO_SubGrupoRow
        Inherits DataRow
        
        Private tableCBO_SubGrupo As CBO_SubGrupoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCBO_SubGrupo = CType(Me.Table,CBO_SubGrupoDataTable)
        End Sub
        
        Public Property CD_CBO As String
            Get
                Return CType(Me(Me.tableCBO_SubGrupo.CD_CBOColumn),String)
            End Get
            Set
                Me(Me.tableCBO_SubGrupo.CD_CBOColumn) = value
            End Set
        End Property
        
        Public Property DS_TITULO As String
            Get
                Try 
                    Return CType(Me(Me.tableCBO_SubGrupo.DS_TITULOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCBO_SubGrupo.DS_TITULOColumn) = value
            End Set
        End Property
        
        Public Function IsDS_TITULONull() As Boolean
            Return Me.IsNull(Me.tableCBO_SubGrupo.DS_TITULOColumn)
        End Function
        
        Public Sub SetDS_TITULONull()
            Me(Me.tableCBO_SubGrupo.DS_TITULOColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CBO_SubGrupoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CBO_SubGrupoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CBO_SubGrupoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CBO_SubGrupoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
